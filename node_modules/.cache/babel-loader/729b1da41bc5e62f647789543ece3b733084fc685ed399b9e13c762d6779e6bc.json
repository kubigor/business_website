{"ast":null,"code":"'use strict';function checkDCE(){/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__==='undefined'||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!=='function'){return;}if(process.env.NODE_ENV!=='production'){// This branch is unreachable because this function is only called\n// in production, but the condition is true only in development.\n// Therefore if the branch is still here, dead code elimination wasn't\n// properly applied.\n// Don't change the message. React DevTools relies on it. Also make sure\n// this message doesn't occur elsewhere in this function, or it will cause\n// a false positive.\nthrow new Error('^_^');}try{// Verify that the code above has been dead code eliminated (DCE'd).\n__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);}catch(err){// DevTools shouldn't crash React, no matter what.\n// We should still report in case we break this code.\nconsole.error(err);}}if(process.env.NODE_ENV==='production'){// DCE check should happen before ReactDOM bundle executes so that\n// DevTools can report bad minification during injection.\ncheckDCE();module.exports=require('./cjs/react-dom.production.min.js');}else{module.exports=require('./cjs/react-dom.development.js');}","map":{"version":3,"names":["checkDCE","__REACT_DEVTOOLS_GLOBAL_HOOK__","process","env","NODE_ENV","Error","err","console","error","module","exports","require"],"sources":["/home/kubigor/projects/business_website/src/node_modules/react-dom/index.js"],"sourcesContent":["'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}\n"],"mappings":"AAAA,YAAY,CAEZ,QAAS,CAAAA,QAAQA,CAAA,CAAG,CAClB,2CACA,GACE,MAAO,CAAAC,8BAA8B,GAAK,WAAW,EACrD,MAAO,CAAAA,8BAA8B,CAACD,QAAQ,GAAK,UAAU,CAC7D,CACA,OACF,CACA,GAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,YAAY,CAAE,CACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAM,IAAI,CAAAC,KAAK,CAAC,KAAK,CAAC,CACxB,CACA,GAAI,CACF;AACAJ,8BAA8B,CAACD,QAAQ,CAACA,QAAQ,CAAC,CACnD,CAAE,MAAOM,GAAG,CAAE,CACZ;AACA;AACAC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC,CACpB,CACF,CAEA,GAAIJ,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,YAAY,CAAE,CACzC;AACA;AACAJ,QAAQ,CAAC,CAAC,CACVS,MAAM,CAACC,OAAO,CAAGC,OAAO,CAAC,mCAAmC,CAAC,CAC/D,CAAC,IAAM,CACLF,MAAM,CAACC,OAAO,CAAGC,OAAO,CAAC,gCAAgC,CAAC,CAC5D"},"metadata":{},"sourceType":"module","externalDependencies":[]}