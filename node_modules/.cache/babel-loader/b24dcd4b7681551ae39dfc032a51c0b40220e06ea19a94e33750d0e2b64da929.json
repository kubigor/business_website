{"ast":null,"code":"var QueryHandler=require('./QueryHandler');var each=require('./Util').each;/**\n * Represents a single media query, manages it's state and registered handlers for this query\n *\n * @constructor\n * @param {string} query the media query string\n * @param {boolean} [isUnconditional=false] whether the media query should run regardless of whether the conditions are met. Primarily for helping older browsers deal with mobile-first design\n */function MediaQuery(query,isUnconditional){this.query=query;this.isUnconditional=isUnconditional;this.handlers=[];this.mql=window.matchMedia(query);var self=this;this.listener=function(mql){// Chrome passes an MediaQueryListEvent object, while other browsers pass MediaQueryList directly\nself.mql=mql.currentTarget||mql;self.assess();};this.mql.addListener(this.listener);}MediaQuery.prototype={constuctor:MediaQuery,/**\n     * add a handler for this query, triggering if already active\n     *\n     * @param {object} handler\n     * @param {function} handler.match callback for when query is activated\n     * @param {function} [handler.unmatch] callback for when query is deactivated\n     * @param {function} [handler.setup] callback for immediate execution when a query handler is registered\n     * @param {boolean} [handler.deferSetup=false] should the setup callback be deferred until the first time the handler is matched?\n     */addHandler:function addHandler(handler){var qh=new QueryHandler(handler);this.handlers.push(qh);this.matches()&&qh.on();},/**\n     * removes the given handler from the collection, and calls it's destroy methods\n     *\n     * @param {object || function} handler the handler to remove\n     */removeHandler:function removeHandler(handler){var handlers=this.handlers;each(handlers,function(h,i){if(h.equals(handler)){h.destroy();return!handlers.splice(i,1);//remove from array and exit each early\n}});},/**\n     * Determine whether the media query should be considered a match\n     *\n     * @return {Boolean} true if media query can be considered a match, false otherwise\n     */matches:function matches(){return this.mql.matches||this.isUnconditional;},/**\n     * Clears all handlers and unbinds events\n     */clear:function clear(){each(this.handlers,function(handler){handler.destroy();});this.mql.removeListener(this.listener);this.handlers.length=0;//clear array\n},/*\n        * Assesses the query, turning on all handlers if it matches, turning them off if it doesn't match\n        */assess:function assess(){var action=this.matches()?'on':'off';each(this.handlers,function(handler){handler[action]();});}};module.exports=MediaQuery;","map":{"version":3,"names":["QueryHandler","require","each","MediaQuery","query","isUnconditional","handlers","mql","window","matchMedia","self","listener","currentTarget","assess","addListener","prototype","constuctor","addHandler","handler","qh","push","matches","on","removeHandler","h","i","equals","destroy","splice","clear","removeListener","length","action","module","exports"],"sources":["/home/kubigor/react/business_website/src/node_modules/enquire.js/src/MediaQuery.js"],"sourcesContent":["var QueryHandler = require('./QueryHandler');\nvar each = require('./Util').each;\n\n/**\n * Represents a single media query, manages it's state and registered handlers for this query\n *\n * @constructor\n * @param {string} query the media query string\n * @param {boolean} [isUnconditional=false] whether the media query should run regardless of whether the conditions are met. Primarily for helping older browsers deal with mobile-first design\n */\nfunction MediaQuery(query, isUnconditional) {\n    this.query = query;\n    this.isUnconditional = isUnconditional;\n    this.handlers = [];\n    this.mql = window.matchMedia(query);\n\n    var self = this;\n    this.listener = function(mql) {\n        // Chrome passes an MediaQueryListEvent object, while other browsers pass MediaQueryList directly\n        self.mql = mql.currentTarget || mql;\n        self.assess();\n    };\n    this.mql.addListener(this.listener);\n}\n\nMediaQuery.prototype = {\n\n    constuctor : MediaQuery,\n\n    /**\n     * add a handler for this query, triggering if already active\n     *\n     * @param {object} handler\n     * @param {function} handler.match callback for when query is activated\n     * @param {function} [handler.unmatch] callback for when query is deactivated\n     * @param {function} [handler.setup] callback for immediate execution when a query handler is registered\n     * @param {boolean} [handler.deferSetup=false] should the setup callback be deferred until the first time the handler is matched?\n     */\n    addHandler : function(handler) {\n        var qh = new QueryHandler(handler);\n        this.handlers.push(qh);\n\n        this.matches() && qh.on();\n    },\n\n    /**\n     * removes the given handler from the collection, and calls it's destroy methods\n     *\n     * @param {object || function} handler the handler to remove\n     */\n    removeHandler : function(handler) {\n        var handlers = this.handlers;\n        each(handlers, function(h, i) {\n            if(h.equals(handler)) {\n                h.destroy();\n                return !handlers.splice(i,1); //remove from array and exit each early\n            }\n        });\n    },\n\n    /**\n     * Determine whether the media query should be considered a match\n     *\n     * @return {Boolean} true if media query can be considered a match, false otherwise\n     */\n    matches : function() {\n        return this.mql.matches || this.isUnconditional;\n    },\n\n    /**\n     * Clears all handlers and unbinds events\n     */\n    clear : function() {\n        each(this.handlers, function(handler) {\n            handler.destroy();\n        });\n        this.mql.removeListener(this.listener);\n        this.handlers.length = 0; //clear array\n    },\n\n    /*\n        * Assesses the query, turning on all handlers if it matches, turning them off if it doesn't match\n        */\n    assess : function() {\n        var action = this.matches() ? 'on' : 'off';\n\n        each(this.handlers, function(handler) {\n            handler[action]();\n        });\n    }\n};\n\nmodule.exports = MediaQuery;\n"],"mappings":"AAAA,GAAI,CAAAA,YAAY,CAAGC,OAAO,CAAC,gBAAgB,CAAC,CAC5C,GAAI,CAAAC,IAAI,CAAGD,OAAO,CAAC,QAAQ,CAAC,CAACC,IAAI,CAEjC;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAC,UAAUA,CAACC,KAAK,CAAEC,eAAe,CAAE,CACxC,IAAI,CAACD,KAAK,CAAGA,KAAK,CAClB,IAAI,CAACC,eAAe,CAAGA,eAAe,CACtC,IAAI,CAACC,QAAQ,CAAG,EAAE,CAClB,IAAI,CAACC,GAAG,CAAGC,MAAM,CAACC,UAAU,CAACL,KAAK,CAAC,CAEnC,GAAI,CAAAM,IAAI,CAAG,IAAI,CACf,IAAI,CAACC,QAAQ,CAAG,SAASJ,GAAG,CAAE,CAC1B;AACAG,IAAI,CAACH,GAAG,CAAGA,GAAG,CAACK,aAAa,EAAIL,GAAG,CACnCG,IAAI,CAACG,MAAM,CAAC,CAAC,CACjB,CAAC,CACD,IAAI,CAACN,GAAG,CAACO,WAAW,CAAC,IAAI,CAACH,QAAQ,CAAC,CACvC,CAEAR,UAAU,CAACY,SAAS,CAAG,CAEnBC,UAAU,CAAGb,UAAU,CAEvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OACIc,UAAU,CAAG,SAAAA,WAASC,OAAO,CAAE,CAC3B,GAAI,CAAAC,EAAE,CAAG,GAAI,CAAAnB,YAAY,CAACkB,OAAO,CAAC,CAClC,IAAI,CAACZ,QAAQ,CAACc,IAAI,CAACD,EAAE,CAAC,CAEtB,IAAI,CAACE,OAAO,CAAC,CAAC,EAAIF,EAAE,CAACG,EAAE,CAAC,CAAC,CAC7B,CAAC,CAED;AACJ;AACA;AACA;AACA,OACIC,aAAa,CAAG,SAAAA,cAASL,OAAO,CAAE,CAC9B,GAAI,CAAAZ,QAAQ,CAAG,IAAI,CAACA,QAAQ,CAC5BJ,IAAI,CAACI,QAAQ,CAAE,SAASkB,CAAC,CAAEC,CAAC,CAAE,CAC1B,GAAGD,CAAC,CAACE,MAAM,CAACR,OAAO,CAAC,CAAE,CAClBM,CAAC,CAACG,OAAO,CAAC,CAAC,CACX,MAAO,CAACrB,QAAQ,CAACsB,MAAM,CAACH,CAAC,CAAC,CAAC,CAAC,CAAE;AAClC,CACJ,CAAC,CAAC,CACN,CAAC,CAED;AACJ;AACA;AACA;AACA,OACIJ,OAAO,CAAG,SAAAA,QAAA,CAAW,CACjB,MAAO,KAAI,CAACd,GAAG,CAACc,OAAO,EAAI,IAAI,CAAChB,eAAe,CACnD,CAAC,CAED;AACJ;AACA,OACIwB,KAAK,CAAG,SAAAA,MAAA,CAAW,CACf3B,IAAI,CAAC,IAAI,CAACI,QAAQ,CAAE,SAASY,OAAO,CAAE,CAClCA,OAAO,CAACS,OAAO,CAAC,CAAC,CACrB,CAAC,CAAC,CACF,IAAI,CAACpB,GAAG,CAACuB,cAAc,CAAC,IAAI,CAACnB,QAAQ,CAAC,CACtC,IAAI,CAACL,QAAQ,CAACyB,MAAM,CAAG,CAAC,CAAE;AAC9B,CAAC,CAED;AACJ;AACA,UACIlB,MAAM,CAAG,SAAAA,OAAA,CAAW,CAChB,GAAI,CAAAmB,MAAM,CAAG,IAAI,CAACX,OAAO,CAAC,CAAC,CAAG,IAAI,CAAG,KAAK,CAE1CnB,IAAI,CAAC,IAAI,CAACI,QAAQ,CAAE,SAASY,OAAO,CAAE,CAClCA,OAAO,CAACc,MAAM,CAAC,CAAC,CAAC,CACrB,CAAC,CAAC,CACN,CACJ,CAAC,CAEDC,MAAM,CAACC,OAAO,CAAG/B,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}