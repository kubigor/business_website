{"ast":null,"code":"var MediaQuery=require('./MediaQuery');var Util=require('./Util');var each=Util.each;var isFunction=Util.isFunction;var isArray=Util.isArray;/**\n * Allows for registration of query handlers.\n * Manages the query handler's state and is responsible for wiring up browser events\n *\n * @constructor\n */function MediaQueryDispatch(){if(!window.matchMedia){throw new Error('matchMedia not present, legacy browsers require a polyfill');}this.queries={};this.browserIsIncapable=!window.matchMedia('only all').matches;}MediaQueryDispatch.prototype={constructor:MediaQueryDispatch,/**\n     * Registers a handler for the given media query\n     *\n     * @param {string} q the media query\n     * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers\n     * @param {function} options.match fired when query matched\n     * @param {function} [options.unmatch] fired when a query is no longer matched\n     * @param {function} [options.setup] fired when handler first triggered\n     * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched\n     * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers\n     */register:function register(q,options,shouldDegrade){var queries=this.queries,isUnconditional=shouldDegrade&&this.browserIsIncapable;if(!queries[q]){queries[q]=new MediaQuery(q,isUnconditional);}//normalise to object in an array\nif(isFunction(options)){options={match:options};}if(!isArray(options)){options=[options];}each(options,function(handler){if(isFunction(handler)){handler={match:handler};}queries[q].addHandler(handler);});return this;},/**\n     * unregisters a query and all it's handlers, or a specific handler for a query\n     *\n     * @param {string} q the media query to target\n     * @param {object || function} [handler] specific handler to unregister\n     */unregister:function unregister(q,handler){var query=this.queries[q];if(query){if(handler){query.removeHandler(handler);}else{query.clear();delete this.queries[q];}}return this;}};module.exports=MediaQueryDispatch;","map":{"version":3,"names":["MediaQuery","require","Util","each","isFunction","isArray","MediaQueryDispatch","window","matchMedia","Error","queries","browserIsIncapable","matches","prototype","constructor","register","q","options","shouldDegrade","isUnconditional","match","handler","addHandler","unregister","query","removeHandler","clear","module","exports"],"sources":["/home/kubigor/react/business_website/src/node_modules/enquire.js/src/MediaQueryDispatch.js"],"sourcesContent":["var MediaQuery = require('./MediaQuery');\nvar Util = require('./Util');\nvar each = Util.each;\nvar isFunction = Util.isFunction;\nvar isArray = Util.isArray;\n\n/**\n * Allows for registration of query handlers.\n * Manages the query handler's state and is responsible for wiring up browser events\n *\n * @constructor\n */\nfunction MediaQueryDispatch () {\n    if(!window.matchMedia) {\n        throw new Error('matchMedia not present, legacy browsers require a polyfill');\n    }\n\n    this.queries = {};\n    this.browserIsIncapable = !window.matchMedia('only all').matches;\n}\n\nMediaQueryDispatch.prototype = {\n\n    constructor : MediaQueryDispatch,\n\n    /**\n     * Registers a handler for the given media query\n     *\n     * @param {string} q the media query\n     * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers\n     * @param {function} options.match fired when query matched\n     * @param {function} [options.unmatch] fired when a query is no longer matched\n     * @param {function} [options.setup] fired when handler first triggered\n     * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched\n     * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers\n     */\n    register : function(q, options, shouldDegrade) {\n        var queries         = this.queries,\n            isUnconditional = shouldDegrade && this.browserIsIncapable;\n\n        if(!queries[q]) {\n            queries[q] = new MediaQuery(q, isUnconditional);\n        }\n\n        //normalise to object in an array\n        if(isFunction(options)) {\n            options = { match : options };\n        }\n        if(!isArray(options)) {\n            options = [options];\n        }\n        each(options, function(handler) {\n            if (isFunction(handler)) {\n                handler = { match : handler };\n            }\n            queries[q].addHandler(handler);\n        });\n\n        return this;\n    },\n\n    /**\n     * unregisters a query and all it's handlers, or a specific handler for a query\n     *\n     * @param {string} q the media query to target\n     * @param {object || function} [handler] specific handler to unregister\n     */\n    unregister : function(q, handler) {\n        var query = this.queries[q];\n\n        if(query) {\n            if(handler) {\n                query.removeHandler(handler);\n            }\n            else {\n                query.clear();\n                delete this.queries[q];\n            }\n        }\n\n        return this;\n    }\n};\n\nmodule.exports = MediaQueryDispatch;\n"],"mappings":"AAAA,GAAI,CAAAA,UAAU,CAAGC,OAAO,CAAC,cAAc,CAAC,CACxC,GAAI,CAAAC,IAAI,CAAGD,OAAO,CAAC,QAAQ,CAAC,CAC5B,GAAI,CAAAE,IAAI,CAAGD,IAAI,CAACC,IAAI,CACpB,GAAI,CAAAC,UAAU,CAAGF,IAAI,CAACE,UAAU,CAChC,GAAI,CAAAC,OAAO,CAAGH,IAAI,CAACG,OAAO,CAE1B;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAC,kBAAkBA,CAAA,CAAI,CAC3B,GAAG,CAACC,MAAM,CAACC,UAAU,CAAE,CACnB,KAAM,IAAI,CAAAC,KAAK,CAAC,4DAA4D,CAAC,CACjF,CAEA,IAAI,CAACC,OAAO,CAAG,CAAC,CAAC,CACjB,IAAI,CAACC,kBAAkB,CAAG,CAACJ,MAAM,CAACC,UAAU,CAAC,UAAU,CAAC,CAACI,OAAO,CACpE,CAEAN,kBAAkB,CAACO,SAAS,CAAG,CAE3BC,WAAW,CAAGR,kBAAkB,CAEhC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OACIS,QAAQ,CAAG,SAAAA,SAASC,CAAC,CAAEC,OAAO,CAAEC,aAAa,CAAE,CAC3C,GAAI,CAAAR,OAAO,CAAW,IAAI,CAACA,OAAO,CAC9BS,eAAe,CAAGD,aAAa,EAAI,IAAI,CAACP,kBAAkB,CAE9D,GAAG,CAACD,OAAO,CAACM,CAAC,CAAC,CAAE,CACZN,OAAO,CAACM,CAAC,CAAC,CAAG,GAAI,CAAAhB,UAAU,CAACgB,CAAC,CAAEG,eAAe,CAAC,CACnD,CAEA;AACA,GAAGf,UAAU,CAACa,OAAO,CAAC,CAAE,CACpBA,OAAO,CAAG,CAAEG,KAAK,CAAGH,OAAQ,CAAC,CACjC,CACA,GAAG,CAACZ,OAAO,CAACY,OAAO,CAAC,CAAE,CAClBA,OAAO,CAAG,CAACA,OAAO,CAAC,CACvB,CACAd,IAAI,CAACc,OAAO,CAAE,SAASI,OAAO,CAAE,CAC5B,GAAIjB,UAAU,CAACiB,OAAO,CAAC,CAAE,CACrBA,OAAO,CAAG,CAAED,KAAK,CAAGC,OAAQ,CAAC,CACjC,CACAX,OAAO,CAACM,CAAC,CAAC,CAACM,UAAU,CAACD,OAAO,CAAC,CAClC,CAAC,CAAC,CAEF,MAAO,KAAI,CACf,CAAC,CAED;AACJ;AACA;AACA;AACA;AACA,OACIE,UAAU,CAAG,SAAAA,WAASP,CAAC,CAAEK,OAAO,CAAE,CAC9B,GAAI,CAAAG,KAAK,CAAG,IAAI,CAACd,OAAO,CAACM,CAAC,CAAC,CAE3B,GAAGQ,KAAK,CAAE,CACN,GAAGH,OAAO,CAAE,CACRG,KAAK,CAACC,aAAa,CAACJ,OAAO,CAAC,CAChC,CAAC,IACI,CACDG,KAAK,CAACE,KAAK,CAAC,CAAC,CACb,MAAO,KAAI,CAAChB,OAAO,CAACM,CAAC,CAAC,CAC1B,CACJ,CAEA,MAAO,KAAI,CACf,CACJ,CAAC,CAEDW,MAAM,CAACC,OAAO,CAAGtB,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}