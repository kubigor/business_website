{"ast":null,"code":"/**\n * @remix-run/router v1.6.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */var Action;(function(Action){/**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */Action[\"Pop\"]=\"POP\";/**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */Action[\"Push\"]=\"PUSH\";/**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */Action[\"Replace\"]=\"REPLACE\";})(Action||(Action={}));const PopStateEventType=\"popstate\";/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */function createMemoryHistory(options){if(options===void 0){options={};}let{initialEntries=[\"/\"],initialIndex,v5Compat=false}=options;let entries;// Declare so we can access from createMemoryLocation\nentries=initialEntries.map((entry,index)=>createMemoryLocation(entry,typeof entry===\"string\"?null:entry.state,index===0?\"default\":undefined));let index=clampIndex(initialIndex==null?entries.length-1:initialIndex);let action=Action.Pop;let listener=null;function clampIndex(n){return Math.min(Math.max(n,0),entries.length-1);}function getCurrentLocation(){return entries[index];}function createMemoryLocation(to,state,key){if(state===void 0){state=null;}let location=createLocation(entries?getCurrentLocation().pathname:\"/\",to,state,key);warning(location.pathname.charAt(0)===\"/\",\"relative pathnames are not supported in memory history: \"+JSON.stringify(to));return location;}function createHref(to){return typeof to===\"string\"?to:createPath(to);}let history={get index(){return index;},get action(){return action;},get location(){return getCurrentLocation();},createHref,createURL(to){return new URL(createHref(to),\"http://localhost\");},encodeLocation(to){let path=typeof to===\"string\"?parsePath(to):to;return{pathname:path.pathname||\"\",search:path.search||\"\",hash:path.hash||\"\"};},push(to,state){action=Action.Push;let nextLocation=createMemoryLocation(to,state);index+=1;entries.splice(index,entries.length,nextLocation);if(v5Compat&&listener){listener({action,location:nextLocation,delta:1});}},replace(to,state){action=Action.Replace;let nextLocation=createMemoryLocation(to,state);entries[index]=nextLocation;if(v5Compat&&listener){listener({action,location:nextLocation,delta:0});}},go(delta){action=Action.Pop;let nextIndex=clampIndex(index+delta);let nextLocation=entries[nextIndex];index=nextIndex;if(listener){listener({action,location:nextLocation,delta});}},listen(fn){listener=fn;return()=>{listener=null;};}};return history;}/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */function createBrowserHistory(options){if(options===void 0){options={};}function createBrowserLocation(window,globalHistory){let{pathname,search,hash}=window.location;return createLocation(\"\",{pathname,search,hash},// state defaults to `null` because `window.history.state` does\nglobalHistory.state&&globalHistory.state.usr||null,globalHistory.state&&globalHistory.state.key||\"default\");}function createBrowserHref(window,to){return typeof to===\"string\"?to:createPath(to);}return getUrlBasedHistory(createBrowserLocation,createBrowserHref,null,options);}/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */function createHashHistory(options){if(options===void 0){options={};}function createHashLocation(window,globalHistory){let{pathname=\"/\",search=\"\",hash=\"\"}=parsePath(window.location.hash.substr(1));return createLocation(\"\",{pathname,search,hash},// state defaults to `null` because `window.history.state` does\nglobalHistory.state&&globalHistory.state.usr||null,globalHistory.state&&globalHistory.state.key||\"default\");}function createHashHref(window,to){let base=window.document.querySelector(\"base\");let href=\"\";if(base&&base.getAttribute(\"href\")){let url=window.location.href;let hashIndex=url.indexOf(\"#\");href=hashIndex===-1?url:url.slice(0,hashIndex);}return href+\"#\"+(typeof to===\"string\"?to:createPath(to));}function validateHashLocation(location,to){warning(location.pathname.charAt(0)===\"/\",\"relative pathnames are not supported in hash history.push(\"+JSON.stringify(to)+\")\");}return getUrlBasedHistory(createHashLocation,createHashHref,validateHashLocation,options);}function invariant(value,message){if(value===false||value===null||typeof value===\"undefined\"){throw new Error(message);}}function warning(cond,message){if(!cond){// eslint-disable-next-line no-console\nif(typeof console!==\"undefined\")console.warn(message);try{// Welcome to debugging history!\n//\n// This error is thrown as a convenience so you can more easily\n// find the source for a warning that appears in the console by\n// enabling \"pause on exceptions\" in your JavaScript debugger.\nthrow new Error(message);// eslint-disable-next-line no-empty\n}catch(e){}}}function createKey(){return Math.random().toString(36).substr(2,8);}/**\n * For browser-based histories, we combine the state and key into an object\n */function getHistoryState(location,index){return{usr:location.state,key:location.key,idx:index};}/**\n * Creates a Location object with a unique key from the given Path\n */function createLocation(current,to,state,key){if(state===void 0){state=null;}let location=_extends({pathname:typeof current===\"string\"?current:current.pathname,search:\"\",hash:\"\"},typeof to===\"string\"?parsePath(to):to,{state,// TODO: This could be cleaned up.  push/replace should probably just take\n// full Locations now and avoid the need to run through this flow at all\n// But that's a pretty big refactor to the current test suite so going to\n// keep as is for the time being and just let any incoming keys take precedence\nkey:to&&to.key||key||createKey()});return location;}/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */function createPath(_ref){let{pathname=\"/\",search=\"\",hash=\"\"}=_ref;if(search&&search!==\"?\")pathname+=search.charAt(0)===\"?\"?search:\"?\"+search;if(hash&&hash!==\"#\")pathname+=hash.charAt(0)===\"#\"?hash:\"#\"+hash;return pathname;}/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */function parsePath(path){let parsedPath={};if(path){let hashIndex=path.indexOf(\"#\");if(hashIndex>=0){parsedPath.hash=path.substr(hashIndex);path=path.substr(0,hashIndex);}let searchIndex=path.indexOf(\"?\");if(searchIndex>=0){parsedPath.search=path.substr(searchIndex);path=path.substr(0,searchIndex);}if(path){parsedPath.pathname=path;}}return parsedPath;}function getUrlBasedHistory(getLocation,createHref,validateLocation,options){if(options===void 0){options={};}let{window=document.defaultView,v5Compat=false}=options;let globalHistory=window.history;let action=Action.Pop;let listener=null;let index=getIndex();// Index should only be null when we initialize. If not, it's because the\n// user called history.pushState or history.replaceState directly, in which\n// case we should log a warning as it will result in bugs.\nif(index==null){index=0;globalHistory.replaceState(_extends({},globalHistory.state,{idx:index}),\"\");}function getIndex(){let state=globalHistory.state||{idx:null};return state.idx;}function handlePop(){action=Action.Pop;let nextIndex=getIndex();let delta=nextIndex==null?null:nextIndex-index;index=nextIndex;if(listener){listener({action,location:history.location,delta});}}function push(to,state){action=Action.Push;let location=createLocation(history.location,to,state);if(validateLocation)validateLocation(location,to);index=getIndex()+1;let historyState=getHistoryState(location,index);let url=history.createHref(location);// try...catch because iOS limits us to 100 pushState calls :/\ntry{globalHistory.pushState(historyState,\"\",url);}catch(error){// They are going to lose state here, but there is no real\n// way to warn them about it since the page will refresh...\nwindow.location.assign(url);}if(v5Compat&&listener){listener({action,location:history.location,delta:1});}}function replace(to,state){action=Action.Replace;let location=createLocation(history.location,to,state);if(validateLocation)validateLocation(location,to);index=getIndex();let historyState=getHistoryState(location,index);let url=history.createHref(location);globalHistory.replaceState(historyState,\"\",url);if(v5Compat&&listener){listener({action,location:history.location,delta:0});}}function createURL(to){// window.location.origin is \"null\" (the literal string value) in Firefox\n// under certain conditions, notably when serving from a local HTML file\n// See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\nlet base=window.location.origin!==\"null\"?window.location.origin:window.location.href;let href=typeof to===\"string\"?to:createPath(to);invariant(base,\"No window.location.(origin|href) available to create URL for href: \"+href);return new URL(href,base);}let history={get action(){return action;},get location(){return getLocation(window,globalHistory);},listen(fn){if(listener){throw new Error(\"A history only accepts one active listener\");}window.addEventListener(PopStateEventType,handlePop);listener=fn;return()=>{window.removeEventListener(PopStateEventType,handlePop);listener=null;};},createHref(to){return createHref(window,to);},createURL,encodeLocation(to){// Encode a Location the same way window.location would\nlet url=createURL(to);return{pathname:url.pathname,search:url.search,hash:url.hash};},push,replace,go(n){return globalHistory.go(n);}};return history;}//#endregion\nvar ResultType;(function(ResultType){ResultType[\"data\"]=\"data\";ResultType[\"deferred\"]=\"deferred\";ResultType[\"redirect\"]=\"redirect\";ResultType[\"error\"]=\"error\";})(ResultType||(ResultType={}));const immutableRouteKeys=new Set([\"lazy\",\"caseSensitive\",\"path\",\"id\",\"index\",\"children\"]);function isIndexRoute(route){return route.index===true;}// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes,mapRouteProperties,parentPath,manifest){if(parentPath===void 0){parentPath=[];}if(manifest===void 0){manifest={};}return routes.map((route,index)=>{let treePath=[...parentPath,index];let id=typeof route.id===\"string\"?route.id:treePath.join(\"-\");invariant(route.index!==true||!route.children,\"Cannot specify children on an index route\");invariant(!manifest[id],\"Found a route id collision on id \\\"\"+id+\"\\\".  Route \"+\"id's must be globally unique within Data Router usages\");if(isIndexRoute(route)){let indexRoute=_extends({},route,mapRouteProperties(route),{id});manifest[id]=indexRoute;return indexRoute;}else{let pathOrLayoutRoute=_extends({},route,mapRouteProperties(route),{id,children:undefined});manifest[id]=pathOrLayoutRoute;if(route.children){pathOrLayoutRoute.children=convertRoutesToDataRoutes(route.children,mapRouteProperties,treePath,manifest);}return pathOrLayoutRoute;}});}/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */function matchRoutes(routes,locationArg,basename){if(basename===void 0){basename=\"/\";}let location=typeof locationArg===\"string\"?parsePath(locationArg):locationArg;let pathname=stripBasename(location.pathname||\"/\",basename);if(pathname==null){return null;}let branches=flattenRoutes(routes);rankRouteBranches(branches);let matches=null;for(let i=0;matches==null&&i<branches.length;++i){matches=matchRouteBranch(branches[i],// Incoming pathnames are generally encoded from either window.location\n// or from router.navigate, but we want to match against the unencoded\n// paths in the route definitions.  Memory router locations won't be\n// encoded here but there also shouldn't be anything to decode so this\n// should be a safe operation.  This avoids needing matchRoutes to be\n// history-aware.\nsafelyDecodeURI(pathname));}return matches;}function flattenRoutes(routes,branches,parentsMeta,parentPath){if(branches===void 0){branches=[];}if(parentsMeta===void 0){parentsMeta=[];}if(parentPath===void 0){parentPath=\"\";}let flattenRoute=(route,index,relativePath)=>{let meta={relativePath:relativePath===undefined?route.path||\"\":relativePath,caseSensitive:route.caseSensitive===true,childrenIndex:index,route};if(meta.relativePath.startsWith(\"/\")){invariant(meta.relativePath.startsWith(parentPath),\"Absolute route path \\\"\"+meta.relativePath+\"\\\" nested under path \"+(\"\\\"\"+parentPath+\"\\\" is not valid. An absolute child route path \")+\"must start with the combined path of all its parent routes.\");meta.relativePath=meta.relativePath.slice(parentPath.length);}let path=joinPaths([parentPath,meta.relativePath]);let routesMeta=parentsMeta.concat(meta);// Add the children before adding this route to the array so we traverse the\n// route tree depth-first and child routes appear before their parents in\n// the \"flattened\" version.\nif(route.children&&route.children.length>0){invariant(// Our types know better, but runtime JS may not!\n// @ts-expect-error\nroute.index!==true,\"Index routes must not have child routes. Please remove \"+(\"all child routes from route path \\\"\"+path+\"\\\".\"));flattenRoutes(route.children,branches,routesMeta,path);}// Routes without a path shouldn't ever match by themselves unless they are\n// index routes, so don't add them to the list of possible branches.\nif(route.path==null&&!route.index){return;}branches.push({path,score:computeScore(path,route.index),routesMeta});};routes.forEach((route,index)=>{var _route$path;// coarse-grain check for optional params\nif(route.path===\"\"||!((_route$path=route.path)!=null&&_route$path.includes(\"?\"))){flattenRoute(route,index);}else{for(let exploded of explodeOptionalSegments(route.path)){flattenRoute(route,index,exploded);}}});return branches;}/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */function explodeOptionalSegments(path){let segments=path.split(\"/\");if(segments.length===0)return[];let[first,...rest]=segments;// Optional path segments are denoted by a trailing `?`\nlet isOptional=first.endsWith(\"?\");// Compute the corresponding required segment: `foo?` -> `foo`\nlet required=first.replace(/\\?$/,\"\");if(rest.length===0){// Intepret empty string as omitting an optional segment\n// `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\nreturn isOptional?[required,\"\"]:[required];}let restExploded=explodeOptionalSegments(rest.join(\"/\"));let result=[];// All child paths with the prefix.  Do this for all children before the\n// optional version for all children so we get consistent ordering where the\n// parent optional aspect is preferred as required.  Otherwise, we can get\n// child sections interspersed where deeper optional segments are higher than\n// parent optional segments, where for example, /:two would explodes _earlier_\n// then /:one.  By always including the parent as required _for all children_\n// first, we avoid this issue\nresult.push(...restExploded.map(subpath=>subpath===\"\"?required:[required,subpath].join(\"/\")));// Then if this is an optional value, add all child versions without\nif(isOptional){result.push(...restExploded);}// for absolute paths, ensure `/` instead of empty segment\nreturn result.map(exploded=>path.startsWith(\"/\")&&exploded===\"\"?\"/\":exploded);}function rankRouteBranches(branches){branches.sort((a,b)=>a.score!==b.score?b.score-a.score// Higher score first\n:compareIndexes(a.routesMeta.map(meta=>meta.childrenIndex),b.routesMeta.map(meta=>meta.childrenIndex)));}const paramRe=/^:\\w+$/;const dynamicSegmentValue=3;const indexRouteValue=2;const emptySegmentValue=1;const staticSegmentValue=10;const splatPenalty=-2;const isSplat=s=>s===\"*\";function computeScore(path,index){let segments=path.split(\"/\");let initialScore=segments.length;if(segments.some(isSplat)){initialScore+=splatPenalty;}if(index){initialScore+=indexRouteValue;}return segments.filter(s=>!isSplat(s)).reduce((score,segment)=>score+(paramRe.test(segment)?dynamicSegmentValue:segment===\"\"?emptySegmentValue:staticSegmentValue),initialScore);}function compareIndexes(a,b){let siblings=a.length===b.length&&a.slice(0,-1).every((n,i)=>n===b[i]);return siblings?// If two routes are siblings, we should try to match the earlier sibling\n// first. This allows people to have fine-grained control over the matching\n// behavior by simply putting routes with identical paths in the order they\n// want them tried.\na[a.length-1]-b[b.length-1]:// Otherwise, it doesn't really make sense to rank non-siblings by index,\n// so they sort equally.\n0;}function matchRouteBranch(branch,pathname){let{routesMeta}=branch;let matchedParams={};let matchedPathname=\"/\";let matches=[];for(let i=0;i<routesMeta.length;++i){let meta=routesMeta[i];let end=i===routesMeta.length-1;let remainingPathname=matchedPathname===\"/\"?pathname:pathname.slice(matchedPathname.length)||\"/\";let match=matchPath({path:meta.relativePath,caseSensitive:meta.caseSensitive,end},remainingPathname);if(!match)return null;Object.assign(matchedParams,match.params);let route=meta.route;matches.push({// TODO: Can this as be avoided?\nparams:matchedParams,pathname:joinPaths([matchedPathname,match.pathname]),pathnameBase:normalizePathname(joinPaths([matchedPathname,match.pathnameBase])),route});if(match.pathnameBase!==\"/\"){matchedPathname=joinPaths([matchedPathname,match.pathnameBase]);}}return matches;}/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */function generatePath(originalPath,params){if(params===void 0){params={};}let path=originalPath;if(path.endsWith(\"*\")&&path!==\"*\"&&!path.endsWith(\"/*\")){warning(false,\"Route path \\\"\"+path+\"\\\" will be treated as if it were \"+(\"\\\"\"+path.replace(/\\*$/,\"/*\")+\"\\\" because the `*` character must \")+\"always follow a `/` in the pattern. To get rid of this warning, \"+(\"please change the route path to \\\"\"+path.replace(/\\*$/,\"/*\")+\"\\\".\"));path=path.replace(/\\*$/,\"/*\");}// ensure `/` is added at the beginning if the path is absolute\nconst prefix=path.startsWith(\"/\")?\"/\":\"\";const segments=path.split(/\\/+/).map((segment,index,array)=>{const isLastSegment=index===array.length-1;// only apply the splat if it's the last segment\nif(isLastSegment&&segment===\"*\"){const star=\"*\";const starParam=params[star];// Apply the splat\nreturn starParam;}const keyMatch=segment.match(/^:(\\w+)(\\??)$/);if(keyMatch){const[,key,optional]=keyMatch;let param=params[key];if(optional===\"?\"){return param==null?\"\":param;}if(param==null){invariant(false,\"Missing \\\":\"+key+\"\\\" param\");}return param;}// Remove any optional markers from optional static segments\nreturn segment.replace(/\\?$/g,\"\");})// Remove empty segments\n.filter(segment=>!!segment);return prefix+segments.join(\"/\");}/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */function matchPath(pattern,pathname){if(typeof pattern===\"string\"){pattern={path:pattern,caseSensitive:false,end:true};}let[matcher,paramNames]=compilePath(pattern.path,pattern.caseSensitive,pattern.end);let match=pathname.match(matcher);if(!match)return null;let matchedPathname=match[0];let pathnameBase=matchedPathname.replace(/(.)\\/+$/,\"$1\");let captureGroups=match.slice(1);let params=paramNames.reduce((memo,paramName,index)=>{// We need to compute the pathnameBase here using the raw splat value\n// instead of using params[\"*\"] later because it will be decoded then\nif(paramName===\"*\"){let splatValue=captureGroups[index]||\"\";pathnameBase=matchedPathname.slice(0,matchedPathname.length-splatValue.length).replace(/(.)\\/+$/,\"$1\");}memo[paramName]=safelyDecodeURIComponent(captureGroups[index]||\"\",paramName);return memo;},{});return{params,pathname:matchedPathname,pathnameBase,pattern};}function compilePath(path,caseSensitive,end){if(caseSensitive===void 0){caseSensitive=false;}if(end===void 0){end=true;}warning(path===\"*\"||!path.endsWith(\"*\")||path.endsWith(\"/*\"),\"Route path \\\"\"+path+\"\\\" will be treated as if it were \"+(\"\\\"\"+path.replace(/\\*$/,\"/*\")+\"\\\" because the `*` character must \")+\"always follow a `/` in the pattern. To get rid of this warning, \"+(\"please change the route path to \\\"\"+path.replace(/\\*$/,\"/*\")+\"\\\".\"));let paramNames=[];let regexpSource=\"^\"+path.replace(/\\/*\\*?$/,\"\")// Ignore trailing / and /*, we'll handle it below\n.replace(/^\\/*/,\"/\")// Make sure it has a leading /\n.replace(/[\\\\.*+^$?{}|()[\\]]/g,\"\\\\$&\")// Escape special regex chars\n.replace(/\\/:(\\w+)/g,(_,paramName)=>{paramNames.push(paramName);return\"/([^\\\\/]+)\";});if(path.endsWith(\"*\")){paramNames.push(\"*\");regexpSource+=path===\"*\"||path===\"/*\"?\"(.*)$\"// Already matched the initial /, just match the rest\n:\"(?:\\\\/(.+)|\\\\/*)$\";// Don't include the / in params[\"*\"]\n}else if(end){// When matching to the end, ignore trailing slashes\nregexpSource+=\"\\\\/*$\";}else if(path!==\"\"&&path!==\"/\"){// If our path is non-empty and contains anything beyond an initial slash,\n// then we have _some_ form of path in our regex so we should expect to\n// match only if we find the end of this path segment.  Look for an optional\n// non-captured trailing slash (to match a portion of the URL) or the end\n// of the path (if we've matched to the end).  We used to do this with a\n// word boundary but that gives false positives on routes like\n// /user-preferences since `-` counts as a word boundary.\nregexpSource+=\"(?:(?=\\\\/|$))\";}else;let matcher=new RegExp(regexpSource,caseSensitive?undefined:\"i\");return[matcher,paramNames];}function safelyDecodeURI(value){try{return decodeURI(value);}catch(error){warning(false,\"The URL path \\\"\"+value+\"\\\" could not be decoded because it is is a \"+\"malformed URL segment. This is probably due to a bad percent \"+(\"encoding (\"+error+\").\"));return value;}}function safelyDecodeURIComponent(value,paramName){try{return decodeURIComponent(value);}catch(error){warning(false,\"The value for the URL param \\\"\"+paramName+\"\\\" will not be decoded because\"+(\" the string \\\"\"+value+\"\\\" is a malformed URL segment. This is probably\")+(\" due to a bad percent encoding (\"+error+\").\"));return value;}}/**\n * @private\n */function stripBasename(pathname,basename){if(basename===\"/\")return pathname;if(!pathname.toLowerCase().startsWith(basename.toLowerCase())){return null;}// We want to leave trailing slash behavior in the user's control, so if they\n// specify a basename with a trailing slash, we should support it\nlet startIndex=basename.endsWith(\"/\")?basename.length-1:basename.length;let nextChar=pathname.charAt(startIndex);if(nextChar&&nextChar!==\"/\"){// pathname does not start with basename/\nreturn null;}return pathname.slice(startIndex)||\"/\";}/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */function resolvePath(to,fromPathname){if(fromPathname===void 0){fromPathname=\"/\";}let{pathname:toPathname,search=\"\",hash=\"\"}=typeof to===\"string\"?parsePath(to):to;let pathname=toPathname?toPathname.startsWith(\"/\")?toPathname:resolvePathname(toPathname,fromPathname):fromPathname;return{pathname,search:normalizeSearch(search),hash:normalizeHash(hash)};}function resolvePathname(relativePath,fromPathname){let segments=fromPathname.replace(/\\/+$/,\"\").split(\"/\");let relativeSegments=relativePath.split(\"/\");relativeSegments.forEach(segment=>{if(segment===\"..\"){// Keep the root \"\" segment so the pathname starts at /\nif(segments.length>1)segments.pop();}else if(segment!==\".\"){segments.push(segment);}});return segments.length>1?segments.join(\"/\"):\"/\";}function getInvalidPathError(char,field,dest,path){return\"Cannot include a '\"+char+\"' character in a manually specified \"+(\"`to.\"+field+\"` field [\"+JSON.stringify(path)+\"].  Please separate it out to the \")+(\"`to.\"+dest+\"` field. Alternatively you may provide the full path as \")+\"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";}/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */function getPathContributingMatches(matches){return matches.filter((match,index)=>index===0||match.route.path&&match.route.path.length>0);}/**\n * @private\n */function resolveTo(toArg,routePathnames,locationPathname,isPathRelative){if(isPathRelative===void 0){isPathRelative=false;}let to;if(typeof toArg===\"string\"){to=parsePath(toArg);}else{to=_extends({},toArg);invariant(!to.pathname||!to.pathname.includes(\"?\"),getInvalidPathError(\"?\",\"pathname\",\"search\",to));invariant(!to.pathname||!to.pathname.includes(\"#\"),getInvalidPathError(\"#\",\"pathname\",\"hash\",to));invariant(!to.search||!to.search.includes(\"#\"),getInvalidPathError(\"#\",\"search\",\"hash\",to));}let isEmptyPath=toArg===\"\"||to.pathname===\"\";let toPathname=isEmptyPath?\"/\":to.pathname;let from;// Routing is relative to the current pathname if explicitly requested.\n//\n// If a pathname is explicitly provided in `to`, it should be relative to the\n// route context. This is explained in `Note on `<Link to>` values` in our\n// migration guide from v5 as a means of disambiguation between `to` values\n// that begin with `/` and those that do not. However, this is problematic for\n// `to` values that do not provide a pathname. `to` can simply be a search or\n// hash string, in which case we should assume that the navigation is relative\n// to the current location's pathname and *not* the route pathname.\nif(isPathRelative||toPathname==null){from=locationPathname;}else{let routePathnameIndex=routePathnames.length-1;if(toPathname.startsWith(\"..\")){let toSegments=toPathname.split(\"/\");// Each leading .. segment means \"go up one route\" instead of \"go up one\n// URL segment\".  This is a key difference from how <a href> works and a\n// major reason we call this a \"to\" value instead of a \"href\".\nwhile(toSegments[0]===\"..\"){toSegments.shift();routePathnameIndex-=1;}to.pathname=toSegments.join(\"/\");}// If there are more \"..\" segments than parent routes, resolve relative to\n// the root / URL.\nfrom=routePathnameIndex>=0?routePathnames[routePathnameIndex]:\"/\";}let path=resolvePath(to,from);// Ensure the pathname has a trailing slash if the original \"to\" had one\nlet hasExplicitTrailingSlash=toPathname&&toPathname!==\"/\"&&toPathname.endsWith(\"/\");// Or if this was a link to the current path which has a trailing slash\nlet hasCurrentTrailingSlash=(isEmptyPath||toPathname===\".\")&&locationPathname.endsWith(\"/\");if(!path.pathname.endsWith(\"/\")&&(hasExplicitTrailingSlash||hasCurrentTrailingSlash)){path.pathname+=\"/\";}return path;}/**\n * @private\n */function getToPathname(to){// Empty strings should be treated the same as / paths\nreturn to===\"\"||to.pathname===\"\"?\"/\":typeof to===\"string\"?parsePath(to).pathname:to.pathname;}/**\n * @private\n */const joinPaths=paths=>paths.join(\"/\").replace(/\\/\\/+/g,\"/\");/**\n * @private\n */const normalizePathname=pathname=>pathname.replace(/\\/+$/,\"\").replace(/^\\/*/,\"/\");/**\n * @private\n */const normalizeSearch=search=>!search||search===\"?\"?\"\":search.startsWith(\"?\")?search:\"?\"+search;/**\n * @private\n */const normalizeHash=hash=>!hash||hash===\"#\"?\"\":hash.startsWith(\"#\")?hash:\"#\"+hash;/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */const json=function json(data,init){if(init===void 0){init={};}let responseInit=typeof init===\"number\"?{status:init}:init;let headers=new Headers(responseInit.headers);if(!headers.has(\"Content-Type\")){headers.set(\"Content-Type\",\"application/json; charset=utf-8\");}return new Response(JSON.stringify(data),_extends({},responseInit,{headers}));};class AbortedDeferredError extends Error{}class DeferredData{constructor(data,responseInit){this.pendingKeysSet=new Set();this.subscribers=new Set();this.deferredKeys=[];invariant(data&&typeof data===\"object\"&&!Array.isArray(data),\"defer() only accepts plain objects\");// Set up an AbortController + Promise we can race against to exit early\n// cancellation\nlet reject;this.abortPromise=new Promise((_,r)=>reject=r);this.controller=new AbortController();let onAbort=()=>reject(new AbortedDeferredError(\"Deferred data aborted\"));this.unlistenAbortSignal=()=>this.controller.signal.removeEventListener(\"abort\",onAbort);this.controller.signal.addEventListener(\"abort\",onAbort);this.data=Object.entries(data).reduce((acc,_ref)=>{let[key,value]=_ref;return Object.assign(acc,{[key]:this.trackPromise(key,value)});},{});if(this.done){// All incoming values were resolved\nthis.unlistenAbortSignal();}this.init=responseInit;}trackPromise(key,value){if(!(value instanceof Promise)){return value;}this.deferredKeys.push(key);this.pendingKeysSet.add(key);// We store a little wrapper promise that will be extended with\n// _data/_error props upon resolve/reject\nlet promise=Promise.race([value,this.abortPromise]).then(data=>this.onSettle(promise,key,null,data),error=>this.onSettle(promise,key,error));// Register rejection listeners to avoid uncaught promise rejections on\n// errors or aborted deferred values\npromise.catch(()=>{});Object.defineProperty(promise,\"_tracked\",{get:()=>true});return promise;}onSettle(promise,key,error,data){if(this.controller.signal.aborted&&error instanceof AbortedDeferredError){this.unlistenAbortSignal();Object.defineProperty(promise,\"_error\",{get:()=>error});return Promise.reject(error);}this.pendingKeysSet.delete(key);if(this.done){// Nothing left to abort!\nthis.unlistenAbortSignal();}if(error){Object.defineProperty(promise,\"_error\",{get:()=>error});this.emit(false,key);return Promise.reject(error);}Object.defineProperty(promise,\"_data\",{get:()=>data});this.emit(false,key);return data;}emit(aborted,settledKey){this.subscribers.forEach(subscriber=>subscriber(aborted,settledKey));}subscribe(fn){this.subscribers.add(fn);return()=>this.subscribers.delete(fn);}cancel(){this.controller.abort();this.pendingKeysSet.forEach((v,k)=>this.pendingKeysSet.delete(k));this.emit(true);}async resolveData(signal){let aborted=false;if(!this.done){let onAbort=()=>this.cancel();signal.addEventListener(\"abort\",onAbort);aborted=await new Promise(resolve=>{this.subscribe(aborted=>{signal.removeEventListener(\"abort\",onAbort);if(aborted||this.done){resolve(aborted);}});});}return aborted;}get done(){return this.pendingKeysSet.size===0;}get unwrappedData(){invariant(this.data!==null&&this.done,\"Can only unwrap data on initialized and settled deferreds\");return Object.entries(this.data).reduce((acc,_ref2)=>{let[key,value]=_ref2;return Object.assign(acc,{[key]:unwrapTrackedPromise(value)});},{});}get pendingKeys(){return Array.from(this.pendingKeysSet);}}function isTrackedPromise(value){return value instanceof Promise&&value._tracked===true;}function unwrapTrackedPromise(value){if(!isTrackedPromise(value)){return value;}if(value._error){throw value._error;}return value._data;}const defer=function defer(data,init){if(init===void 0){init={};}let responseInit=typeof init===\"number\"?{status:init}:init;return new DeferredData(data,responseInit);};/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */const redirect=function redirect(url,init){if(init===void 0){init=302;}let responseInit=init;if(typeof responseInit===\"number\"){responseInit={status:responseInit};}else if(typeof responseInit.status===\"undefined\"){responseInit.status=302;}let headers=new Headers(responseInit.headers);headers.set(\"Location\",url);return new Response(null,_extends({},responseInit,{headers}));};/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */class ErrorResponse{constructor(status,statusText,data,internal){if(internal===void 0){internal=false;}this.status=status;this.statusText=statusText||\"\";this.internal=internal;if(data instanceof Error){this.data=data.toString();this.error=data;}else{this.data=data;}}}/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */function isRouteErrorResponse(error){return error!=null&&typeof error.status===\"number\"&&typeof error.statusText===\"string\"&&typeof error.internal===\"boolean\"&&\"data\"in error;}const validMutationMethodsArr=[\"post\",\"put\",\"patch\",\"delete\"];const validMutationMethods=new Set(validMutationMethodsArr);const validRequestMethodsArr=[\"get\",...validMutationMethodsArr];const validRequestMethods=new Set(validRequestMethodsArr);const redirectStatusCodes=new Set([301,302,303,307,308]);const redirectPreserveMethodStatusCodes=new Set([307,308]);const IDLE_NAVIGATION={state:\"idle\",location:undefined,formMethod:undefined,formAction:undefined,formEncType:undefined,formData:undefined};const IDLE_FETCHER={state:\"idle\",data:undefined,formMethod:undefined,formAction:undefined,formEncType:undefined,formData:undefined};const IDLE_BLOCKER={state:\"unblocked\",proceed:undefined,reset:undefined,location:undefined};const ABSOLUTE_URL_REGEX=/^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;const isBrowser=typeof window!==\"undefined\"&&typeof window.document!==\"undefined\"&&typeof window.document.createElement!==\"undefined\";const isServer=!isBrowser;const defaultMapRouteProperties=route=>({hasErrorBoundary:Boolean(route.hasErrorBoundary)});//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */function createRouter(init){invariant(init.routes.length>0,\"You must provide a non-empty routes array to createRouter\");let mapRouteProperties;if(init.mapRouteProperties){mapRouteProperties=init.mapRouteProperties;}else if(init.detectErrorBoundary){// If they are still using the deprecated version, wrap it with the new API\nlet detectErrorBoundary=init.detectErrorBoundary;mapRouteProperties=route=>({hasErrorBoundary:detectErrorBoundary(route)});}else{mapRouteProperties=defaultMapRouteProperties;}// Routes keyed by ID\nlet manifest={};// Routes in tree format for matching\nlet dataRoutes=convertRoutesToDataRoutes(init.routes,mapRouteProperties,undefined,manifest);let inFlightDataRoutes;let basename=init.basename||\"/\";// Config driven behavior flags\nlet future=_extends({v7_normalizeFormMethod:false,v7_prependBasename:false},init.future);// Cleanup function for history\nlet unlistenHistory=null;// Externally-provided functions to call on all state changes\nlet subscribers=new Set();// Externally-provided object to hold scroll restoration locations during routing\nlet savedScrollPositions=null;// Externally-provided function to get scroll restoration keys\nlet getScrollRestorationKey=null;// Externally-provided function to get current scroll position\nlet getScrollPosition=null;// One-time flag to control the initial hydration scroll restoration.  Because\n// we don't get the saved positions from <ScrollRestoration /> until _after_\n// the initial render, we need to manually trigger a separate updateState to\n// send along the restoreScrollPosition\n// Set to true if we have `hydrationData` since we assume we were SSR'd and that\n// SSR did the initial scroll restoration.\nlet initialScrollRestored=init.hydrationData!=null;let initialMatches=matchRoutes(dataRoutes,init.history.location,basename);let initialErrors=null;if(initialMatches==null){// If we do not match a user-provided-route, fall back to the root\n// to allow the error boundary to take over\nlet error=getInternalRouterError(404,{pathname:init.history.location.pathname});let{matches,route}=getShortCircuitMatches(dataRoutes);initialMatches=matches;initialErrors={[route.id]:error};}let initialized=// All initialMatches need to be loaded before we're ready.  If we have lazy\n// functions around still then we'll need to run them in initialize()\n!initialMatches.some(m=>m.route.lazy)&&(// And we have to either have no loaders or have been provided hydrationData\n!initialMatches.some(m=>m.route.loader)||init.hydrationData!=null);let router;let state={historyAction:init.history.action,location:init.history.location,matches:initialMatches,initialized,navigation:IDLE_NAVIGATION,// Don't restore on initial updateState() if we were SSR'd\nrestoreScrollPosition:init.hydrationData!=null?false:null,preventScrollReset:false,revalidation:\"idle\",loaderData:init.hydrationData&&init.hydrationData.loaderData||{},actionData:init.hydrationData&&init.hydrationData.actionData||null,errors:init.hydrationData&&init.hydrationData.errors||initialErrors,fetchers:new Map(),blockers:new Map()};// -- Stateful internal variables to manage navigations --\n// Current navigation in progress (to be committed in completeNavigation)\nlet pendingAction=Action.Pop;// Should the current navigation prevent the scroll reset if scroll cannot\n// be restored?\nlet pendingPreventScrollReset=false;// AbortController for the active navigation\nlet pendingNavigationController;// We use this to avoid touching history in completeNavigation if a\n// revalidation is entirely uninterrupted\nlet isUninterruptedRevalidation=false;// Use this internal flag to force revalidation of all loaders:\n//  - submissions (completed or interrupted)\n//  - useRevalidator()\n//  - X-Remix-Revalidate (from redirect)\nlet isRevalidationRequired=false;// Use this internal array to capture routes that require revalidation due\n// to a cancelled deferred on action submission\nlet cancelledDeferredRoutes=[];// Use this internal array to capture fetcher loads that were cancelled by an\n// action navigation and require revalidation\nlet cancelledFetcherLoads=[];// AbortControllers for any in-flight fetchers\nlet fetchControllers=new Map();// Track loads based on the order in which they started\nlet incrementingLoadId=0;// Track the outstanding pending navigation data load to be compared against\n// the globally incrementing load when a fetcher load lands after a completed\n// navigation\nlet pendingNavigationLoadId=-1;// Fetchers that triggered data reloads as a result of their actions\nlet fetchReloadIds=new Map();// Fetchers that triggered redirect navigations\nlet fetchRedirectIds=new Set();// Most recent href/match for fetcher.load calls for fetchers\nlet fetchLoadMatches=new Map();// Store DeferredData instances for active route matches.  When a\n// route loader returns defer() we stick one in here.  Then, when a nested\n// promise resolves we update loaderData.  If a new navigation starts we\n// cancel active deferreds for eliminated routes.\nlet activeDeferreds=new Map();// Store blocker functions in a separate Map outside of router state since\n// we don't need to update UI state if they change\nlet blockerFunctions=new Map();// Flag to ignore the next history update, so we can revert the URL change on\n// a POP navigation that was blocked by the user without touching router state\nlet ignoreNextHistoryUpdate=false;// Initialize the router, all side effects should be kicked off from here.\n// Implemented as a Fluent API for ease of:\n//   let router = createRouter(init).initialize();\nfunction initialize(){// If history informs us of a POP navigation, start the navigation but do not update\n// state.  We'll update our own state once the navigation completes\nunlistenHistory=init.history.listen(_ref=>{let{action:historyAction,location,delta}=_ref;// Ignore this event if it was just us resetting the URL from a\n// blocked POP navigation\nif(ignoreNextHistoryUpdate){ignoreNextHistoryUpdate=false;return;}warning(blockerFunctions.size===0||delta!=null,\"You are trying to use a blocker on a POP navigation to a location \"+\"that was not created by @remix-run/router. This will fail silently in \"+\"production. This can happen if you are navigating outside the router \"+\"via `window.history.pushState`/`window.location.hash` instead of using \"+\"router navigation APIs.  This can also happen if you are using \"+\"createHashRouter and the user manually changes the URL.\");let blockerKey=shouldBlockNavigation({currentLocation:state.location,nextLocation:location,historyAction});if(blockerKey&&delta!=null){// Restore the URL to match the current UI, but don't update router state\nignoreNextHistoryUpdate=true;init.history.go(delta*-1);// Put the blocker into a blocked state\nupdateBlocker(blockerKey,{state:\"blocked\",location,proceed(){updateBlocker(blockerKey,{state:\"proceeding\",proceed:undefined,reset:undefined,location});// Re-do the same POP navigation we just blocked\ninit.history.go(delta);},reset(){deleteBlocker(blockerKey);updateState({blockers:new Map(router.state.blockers)});}});return;}return startNavigation(historyAction,location);});// Kick off initial data load if needed.  Use Pop to avoid modifying history\n// Note we don't do any handling of lazy here.  For SPA's it'll get handled\n// in the normal navigation flow.  For SSR it's expected that lazy modules are\n// resolved prior to router creation since we can't go into a fallbackElement\n// UI for SSR'd apps\nif(!state.initialized){startNavigation(Action.Pop,state.location);}return router;}// Clean up a router and it's side effects\nfunction dispose(){if(unlistenHistory){unlistenHistory();}subscribers.clear();pendingNavigationController&&pendingNavigationController.abort();state.fetchers.forEach((_,key)=>deleteFetcher(key));state.blockers.forEach((_,key)=>deleteBlocker(key));}// Subscribe to state updates for the router\nfunction subscribe(fn){subscribers.add(fn);return()=>subscribers.delete(fn);}// Update our state and notify the calling context of the change\nfunction updateState(newState){state=_extends({},state,newState);subscribers.forEach(subscriber=>subscriber(state));}// Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n// and setting state.[historyAction/location/matches] to the new route.\n// - Location is a required param\n// - Navigation will always be set to IDLE_NAVIGATION\n// - Can pass any other state in newState\nfunction completeNavigation(location,newState){var _location$state,_location$state2;// Deduce if we're in a loading/actionReload state:\n// - We have committed actionData in the store\n// - The current navigation was a mutation submission\n// - We're past the submitting state and into the loading state\n// - The location being loaded is not the result of a redirect\nlet isActionReload=state.actionData!=null&&state.navigation.formMethod!=null&&isMutationMethod(state.navigation.formMethod)&&state.navigation.state===\"loading\"&&((_location$state=location.state)==null?void 0:_location$state._isRedirect)!==true;let actionData;if(newState.actionData){if(Object.keys(newState.actionData).length>0){actionData=newState.actionData;}else{// Empty actionData -> clear prior actionData due to an action error\nactionData=null;}}else if(isActionReload){// Keep the current data if we're wrapping up the action reload\nactionData=state.actionData;}else{// Clear actionData on any other completed navigations\nactionData=null;}// Always preserve any existing loaderData from re-used routes\nlet loaderData=newState.loaderData?mergeLoaderData(state.loaderData,newState.loaderData,newState.matches||[],newState.errors):state.loaderData;// On a successful navigation we can assume we got through all blockers\n// so we can start fresh\nfor(let[key]of blockerFunctions){deleteBlocker(key);}// Always respect the user flag.  Otherwise don't reset on mutation\n// submission navigations unless they redirect\nlet preventScrollReset=pendingPreventScrollReset===true||state.navigation.formMethod!=null&&isMutationMethod(state.navigation.formMethod)&&((_location$state2=location.state)==null?void 0:_location$state2._isRedirect)!==true;if(inFlightDataRoutes){dataRoutes=inFlightDataRoutes;inFlightDataRoutes=undefined;}updateState(_extends({},newState,{actionData,loaderData,historyAction:pendingAction,location,initialized:true,navigation:IDLE_NAVIGATION,revalidation:\"idle\",restoreScrollPosition:getSavedScrollPosition(location,newState.matches||state.matches),preventScrollReset,blockers:new Map(state.blockers)}));if(isUninterruptedRevalidation);else if(pendingAction===Action.Pop);else if(pendingAction===Action.Push){init.history.push(location,location.state);}else if(pendingAction===Action.Replace){init.history.replace(location,location.state);}// Reset stateful navigation vars\npendingAction=Action.Pop;pendingPreventScrollReset=false;isUninterruptedRevalidation=false;isRevalidationRequired=false;cancelledDeferredRoutes=[];cancelledFetcherLoads=[];}// Trigger a navigation event, which can either be a numerical POP or a PUSH\n// replace with an optional submission\nasync function navigate(to,opts){if(typeof to===\"number\"){init.history.go(to);return;}let normalizedPath=normalizeTo(state.location,state.matches,basename,future.v7_prependBasename,to,opts==null?void 0:opts.fromRouteId,opts==null?void 0:opts.relative);let{path,submission,error}=normalizeNavigateOptions(future.v7_normalizeFormMethod,false,normalizedPath,opts);let currentLocation=state.location;let nextLocation=createLocation(state.location,path,opts&&opts.state);// When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n// URL from window.location, so we need to encode it here so the behavior\n// remains the same as POP and non-data-router usages.  new URL() does all\n// the same encoding we'd get from a history.pushState/window.location read\n// without having to touch history\nnextLocation=_extends({},nextLocation,init.history.encodeLocation(nextLocation));let userReplace=opts&&opts.replace!=null?opts.replace:undefined;let historyAction=Action.Push;if(userReplace===true){historyAction=Action.Replace;}else if(userReplace===false);else if(submission!=null&&isMutationMethod(submission.formMethod)&&submission.formAction===state.location.pathname+state.location.search){// By default on submissions to the current location we REPLACE so that\n// users don't have to double-click the back button to get to the prior\n// location.  If the user redirects to a different location from the\n// action/loader this will be ignored and the redirect will be a PUSH\nhistoryAction=Action.Replace;}let preventScrollReset=opts&&\"preventScrollReset\"in opts?opts.preventScrollReset===true:undefined;let blockerKey=shouldBlockNavigation({currentLocation,nextLocation,historyAction});if(blockerKey){// Put the blocker into a blocked state\nupdateBlocker(blockerKey,{state:\"blocked\",location:nextLocation,proceed(){updateBlocker(blockerKey,{state:\"proceeding\",proceed:undefined,reset:undefined,location:nextLocation});// Send the same navigation through\nnavigate(to,opts);},reset(){deleteBlocker(blockerKey);updateState({blockers:new Map(state.blockers)});}});return;}return await startNavigation(historyAction,nextLocation,{submission,// Send through the formData serialization error if we have one so we can\n// render at the right error boundary after we match routes\npendingError:error,preventScrollReset,replace:opts&&opts.replace});}// Revalidate all current loaders.  If a navigation is in progress or if this\n// is interrupted by a navigation, allow this to \"succeed\" by calling all\n// loaders during the next loader round\nfunction revalidate(){interruptActiveLoads();updateState({revalidation:\"loading\"});// If we're currently submitting an action, we don't need to start a new\n// navigation, we'll just let the follow up loader execution call all loaders\nif(state.navigation.state===\"submitting\"){return;}// If we're currently in an idle state, start a new navigation for the current\n// action/location and mark it as uninterrupted, which will skip the history\n// update in completeNavigation\nif(state.navigation.state===\"idle\"){startNavigation(state.historyAction,state.location,{startUninterruptedRevalidation:true});return;}// Otherwise, if we're currently in a loading state, just start a new\n// navigation to the navigation.location but do not trigger an uninterrupted\n// revalidation so that history correctly updates once the navigation completes\nstartNavigation(pendingAction||state.historyAction,state.navigation.location,{overrideNavigation:state.navigation});}// Start a navigation to the given action/location.  Can optionally provide a\n// overrideNavigation which will override the normalLoad in the case of a redirect\n// navigation\nasync function startNavigation(historyAction,location,opts){// Abort any in-progress navigations and start a new one. Unset any ongoing\n// uninterrupted revalidations unless told otherwise, since we want this\n// new navigation to update history normally\npendingNavigationController&&pendingNavigationController.abort();pendingNavigationController=null;pendingAction=historyAction;isUninterruptedRevalidation=(opts&&opts.startUninterruptedRevalidation)===true;// Save the current scroll position every time we start a new navigation,\n// and track whether we should reset scroll on completion\nsaveScrollPosition(state.location,state.matches);pendingPreventScrollReset=(opts&&opts.preventScrollReset)===true;let routesToUse=inFlightDataRoutes||dataRoutes;let loadingNavigation=opts&&opts.overrideNavigation;let matches=matchRoutes(routesToUse,location,basename);// Short circuit with a 404 on the root error boundary if we match nothing\nif(!matches){let error=getInternalRouterError(404,{pathname:location.pathname});let{matches:notFoundMatches,route}=getShortCircuitMatches(routesToUse);// Cancel all pending deferred on 404s since we don't keep any routes\ncancelActiveDeferreds();completeNavigation(location,{matches:notFoundMatches,loaderData:{},errors:{[route.id]:error}});return;}// Short circuit if it's only a hash change and not a mutation submission\n// For example, on /page#hash and submit a <Form method=\"post\"> which will\n// default to a navigation to /page\nif(isHashChangeOnly(state.location,location)&&!(opts&&opts.submission&&isMutationMethod(opts.submission.formMethod))){completeNavigation(location,{matches});return;}// Create a controller/Request for this navigation\npendingNavigationController=new AbortController();let request=createClientSideRequest(init.history,location,pendingNavigationController.signal,opts&&opts.submission);let pendingActionData;let pendingError;if(opts&&opts.pendingError){// If we have a pendingError, it means the user attempted a GET submission\n// with binary FormData so assign here and skip to handleLoaders.  That\n// way we handle calling loaders above the boundary etc.  It's not really\n// different from an actionError in that sense.\npendingError={[findNearestBoundary(matches).route.id]:opts.pendingError};}else if(opts&&opts.submission&&isMutationMethod(opts.submission.formMethod)){// Call action if we received an action submission\nlet actionOutput=await handleAction(request,location,opts.submission,matches,{replace:opts.replace});if(actionOutput.shortCircuited){return;}pendingActionData=actionOutput.pendingActionData;pendingError=actionOutput.pendingActionError;let navigation=_extends({state:\"loading\",location},opts.submission);loadingNavigation=navigation;// Create a GET request for the loaders\nrequest=new Request(request.url,{signal:request.signal});}// Call loaders\nlet{shortCircuited,loaderData,errors}=await handleLoaders(request,location,matches,loadingNavigation,opts&&opts.submission,opts&&opts.fetcherSubmission,opts&&opts.replace,pendingActionData,pendingError);if(shortCircuited){return;}// Clean up now that the action/loaders have completed.  Don't clean up if\n// we short circuited because pendingNavigationController will have already\n// been assigned to a new controller for the next navigation\npendingNavigationController=null;completeNavigation(location,_extends({matches},pendingActionData?{actionData:pendingActionData}:{},{loaderData,errors}));}// Call the action matched by the leaf route for this navigation and handle\n// redirects/errors\nasync function handleAction(request,location,submission,matches,opts){interruptActiveLoads();// Put us in a submitting state\nlet navigation=_extends({state:\"submitting\",location},submission);updateState({navigation});// Call our action and get the result\nlet result;let actionMatch=getTargetMatch(matches,location);if(!actionMatch.route.action&&!actionMatch.route.lazy){result={type:ResultType.error,error:getInternalRouterError(405,{method:request.method,pathname:location.pathname,routeId:actionMatch.route.id})};}else{result=await callLoaderOrAction(\"action\",request,actionMatch,matches,manifest,mapRouteProperties,basename);if(request.signal.aborted){return{shortCircuited:true};}}if(isRedirectResult(result)){let replace;if(opts&&opts.replace!=null){replace=opts.replace;}else{// If the user didn't explicity indicate replace behavior, replace if\n// we redirected to the exact same location we're currently at to avoid\n// double back-buttons\nreplace=result.location===state.location.pathname+state.location.search;}await startRedirectNavigation(state,result,{submission,replace});return{shortCircuited:true};}if(isErrorResult(result)){// Store off the pending error - we use it to determine which loaders\n// to call and will commit it when we complete the navigation\nlet boundaryMatch=findNearestBoundary(matches,actionMatch.route.id);// By default, all submissions are REPLACE navigations, but if the\n// action threw an error that'll be rendered in an errorElement, we fall\n// back to PUSH so that the user can use the back button to get back to\n// the pre-submission form location to try again\nif((opts&&opts.replace)!==true){pendingAction=Action.Push;}return{// Send back an empty object we can use to clear out any prior actionData\npendingActionData:{},pendingActionError:{[boundaryMatch.route.id]:result.error}};}if(isDeferredResult(result)){throw getInternalRouterError(400,{type:\"defer-action\"});}return{pendingActionData:{[actionMatch.route.id]:result.data}};}// Call all applicable loaders for the given matches, handling redirects,\n// errors, etc.\nasync function handleLoaders(request,location,matches,overrideNavigation,submission,fetcherSubmission,replace,pendingActionData,pendingError){// Figure out the right navigation we want to use for data loading\nlet loadingNavigation=overrideNavigation;if(!loadingNavigation){let navigation=_extends({state:\"loading\",location,formMethod:undefined,formAction:undefined,formEncType:undefined,formData:undefined},submission);loadingNavigation=navigation;}// If this was a redirect from an action we don't have a \"submission\" but\n// we have it on the loading navigation so use that if available\nlet activeSubmission=submission||fetcherSubmission?submission||fetcherSubmission:loadingNavigation.formMethod&&loadingNavigation.formAction&&loadingNavigation.formData&&loadingNavigation.formEncType?{formMethod:loadingNavigation.formMethod,formAction:loadingNavigation.formAction,formData:loadingNavigation.formData,formEncType:loadingNavigation.formEncType}:undefined;let routesToUse=inFlightDataRoutes||dataRoutes;let[matchesToLoad,revalidatingFetchers]=getMatchesToLoad(init.history,state,matches,activeSubmission,location,isRevalidationRequired,cancelledDeferredRoutes,cancelledFetcherLoads,fetchLoadMatches,routesToUse,basename,pendingActionData,pendingError);// Cancel pending deferreds for no-longer-matched routes or routes we're\n// about to reload.  Note that if this is an action reload we would have\n// already cancelled all pending deferreds so this would be a no-op\ncancelActiveDeferreds(routeId=>!(matches&&matches.some(m=>m.route.id===routeId))||matchesToLoad&&matchesToLoad.some(m=>m.route.id===routeId));// Short circuit if we have no loaders to run\nif(matchesToLoad.length===0&&revalidatingFetchers.length===0){let updatedFetchers=markFetchRedirectsDone();completeNavigation(location,_extends({matches,loaderData:{},// Commit pending error if we're short circuiting\nerrors:pendingError||null},pendingActionData?{actionData:pendingActionData}:{},updatedFetchers?{fetchers:new Map(state.fetchers)}:{}));return{shortCircuited:true};}// If this is an uninterrupted revalidation, we remain in our current idle\n// state.  If not, we need to switch to our loading state and load data,\n// preserving any new action data or existing action data (in the case of\n// a revalidation interrupting an actionReload)\nif(!isUninterruptedRevalidation){revalidatingFetchers.forEach(rf=>{let fetcher=state.fetchers.get(rf.key);let revalidatingFetcher={state:\"loading\",data:fetcher&&fetcher.data,formMethod:undefined,formAction:undefined,formEncType:undefined,formData:undefined,\" _hasFetcherDoneAnything \":true};state.fetchers.set(rf.key,revalidatingFetcher);});let actionData=pendingActionData||state.actionData;updateState(_extends({navigation:loadingNavigation},actionData?Object.keys(actionData).length===0?{actionData:null}:{actionData}:{},revalidatingFetchers.length>0?{fetchers:new Map(state.fetchers)}:{}));}pendingNavigationLoadId=++incrementingLoadId;revalidatingFetchers.forEach(rf=>{if(rf.controller){// Fetchers use an independent AbortController so that aborting a fetcher\n// (via deleteFetcher) does not abort the triggering navigation that\n// triggered the revalidation\nfetchControllers.set(rf.key,rf.controller);}});// Proxy navigation abort through to revalidation fetchers\nlet abortPendingFetchRevalidations=()=>revalidatingFetchers.forEach(f=>abortFetcher(f.key));if(pendingNavigationController){pendingNavigationController.signal.addEventListener(\"abort\",abortPendingFetchRevalidations);}let{results,loaderResults,fetcherResults}=await callLoadersAndMaybeResolveData(state.matches,matches,matchesToLoad,revalidatingFetchers,request);if(request.signal.aborted){return{shortCircuited:true};}// Clean up _after_ loaders have completed.  Don't clean up if we short\n// circuited because fetchControllers would have been aborted and\n// reassigned to new controllers for the next navigation\nif(pendingNavigationController){pendingNavigationController.signal.removeEventListener(\"abort\",abortPendingFetchRevalidations);}revalidatingFetchers.forEach(rf=>fetchControllers.delete(rf.key));// If any loaders returned a redirect Response, start a new REPLACE navigation\nlet redirect=findRedirect(results);if(redirect){await startRedirectNavigation(state,redirect,{replace});return{shortCircuited:true};}// Process and commit output from loaders\nlet{loaderData,errors}=processLoaderData(state,matches,matchesToLoad,loaderResults,pendingError,revalidatingFetchers,fetcherResults,activeDeferreds);// Wire up subscribers to update loaderData as promises settle\nactiveDeferreds.forEach((deferredData,routeId)=>{deferredData.subscribe(aborted=>{// Note: No need to updateState here since the TrackedPromise on\n// loaderData is stable across resolve/reject\n// Remove this instance if we were aborted or if promises have settled\nif(aborted||deferredData.done){activeDeferreds.delete(routeId);}});});let updatedFetchers=markFetchRedirectsDone();let didAbortFetchLoads=abortStaleFetchLoads(pendingNavigationLoadId);let shouldUpdateFetchers=updatedFetchers||didAbortFetchLoads||revalidatingFetchers.length>0;return _extends({loaderData,errors},shouldUpdateFetchers?{fetchers:new Map(state.fetchers)}:{});}function getFetcher(key){return state.fetchers.get(key)||IDLE_FETCHER;}// Trigger a fetcher load/submit for the given fetcher key\nfunction fetch(key,routeId,href,opts){if(isServer){throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \"+\"You are likely calling a useFetcher() method in the body of your component. \"+\"Try moving it to a useEffect or a callback.\");}if(fetchControllers.has(key))abortFetcher(key);let routesToUse=inFlightDataRoutes||dataRoutes;let normalizedPath=normalizeTo(state.location,state.matches,basename,future.v7_prependBasename,href,routeId,opts==null?void 0:opts.relative);let matches=matchRoutes(routesToUse,normalizedPath,basename);if(!matches){setFetcherError(key,routeId,getInternalRouterError(404,{pathname:normalizedPath}));return;}let{path,submission}=normalizeNavigateOptions(future.v7_normalizeFormMethod,true,normalizedPath,opts);let match=getTargetMatch(matches,path);pendingPreventScrollReset=(opts&&opts.preventScrollReset)===true;if(submission&&isMutationMethod(submission.formMethod)){handleFetcherAction(key,routeId,path,match,matches,submission);return;}// Store off the match so we can call it's shouldRevalidate on subsequent\n// revalidations\nfetchLoadMatches.set(key,{routeId,path});handleFetcherLoader(key,routeId,path,match,matches,submission);}// Call the action for the matched fetcher.submit(), and then handle redirects,\n// errors, and revalidation\nasync function handleFetcherAction(key,routeId,path,match,requestMatches,submission){interruptActiveLoads();fetchLoadMatches.delete(key);if(!match.route.action&&!match.route.lazy){let error=getInternalRouterError(405,{method:submission.formMethod,pathname:path,routeId:routeId});setFetcherError(key,routeId,error);return;}// Put this fetcher into it's submitting state\nlet existingFetcher=state.fetchers.get(key);let fetcher=_extends({state:\"submitting\"},submission,{data:existingFetcher&&existingFetcher.data,\" _hasFetcherDoneAnything \":true});state.fetchers.set(key,fetcher);updateState({fetchers:new Map(state.fetchers)});// Call the action for the fetcher\nlet abortController=new AbortController();let fetchRequest=createClientSideRequest(init.history,path,abortController.signal,submission);fetchControllers.set(key,abortController);let actionResult=await callLoaderOrAction(\"action\",fetchRequest,match,requestMatches,manifest,mapRouteProperties,basename);if(fetchRequest.signal.aborted){// We can delete this so long as we weren't aborted by ou our own fetcher\n// re-submit which would have put _new_ controller is in fetchControllers\nif(fetchControllers.get(key)===abortController){fetchControllers.delete(key);}return;}if(isRedirectResult(actionResult)){fetchControllers.delete(key);fetchRedirectIds.add(key);let loadingFetcher=_extends({state:\"loading\"},submission,{data:undefined,\" _hasFetcherDoneAnything \":true});state.fetchers.set(key,loadingFetcher);updateState({fetchers:new Map(state.fetchers)});return startRedirectNavigation(state,actionResult,{submission,isFetchActionRedirect:true});}// Process any non-redirect errors thrown\nif(isErrorResult(actionResult)){setFetcherError(key,routeId,actionResult.error);return;}if(isDeferredResult(actionResult)){throw getInternalRouterError(400,{type:\"defer-action\"});}// Start the data load for current matches, or the next location if we're\n// in the middle of a navigation\nlet nextLocation=state.navigation.location||state.location;let revalidationRequest=createClientSideRequest(init.history,nextLocation,abortController.signal);let routesToUse=inFlightDataRoutes||dataRoutes;let matches=state.navigation.state!==\"idle\"?matchRoutes(routesToUse,state.navigation.location,basename):state.matches;invariant(matches,\"Didn't find any matches after fetcher action\");let loadId=++incrementingLoadId;fetchReloadIds.set(key,loadId);let loadFetcher=_extends({state:\"loading\",data:actionResult.data},submission,{\" _hasFetcherDoneAnything \":true});state.fetchers.set(key,loadFetcher);let[matchesToLoad,revalidatingFetchers]=getMatchesToLoad(init.history,state,matches,submission,nextLocation,isRevalidationRequired,cancelledDeferredRoutes,cancelledFetcherLoads,fetchLoadMatches,routesToUse,basename,{[match.route.id]:actionResult.data},undefined// No need to send through errors since we short circuit above\n);// Put all revalidating fetchers into the loading state, except for the\n// current fetcher which we want to keep in it's current loading state which\n// contains it's action submission info + action data\nrevalidatingFetchers.filter(rf=>rf.key!==key).forEach(rf=>{let staleKey=rf.key;let existingFetcher=state.fetchers.get(staleKey);let revalidatingFetcher={state:\"loading\",data:existingFetcher&&existingFetcher.data,formMethod:undefined,formAction:undefined,formEncType:undefined,formData:undefined,\" _hasFetcherDoneAnything \":true};state.fetchers.set(staleKey,revalidatingFetcher);if(rf.controller){fetchControllers.set(staleKey,rf.controller);}});updateState({fetchers:new Map(state.fetchers)});let abortPendingFetchRevalidations=()=>revalidatingFetchers.forEach(rf=>abortFetcher(rf.key));abortController.signal.addEventListener(\"abort\",abortPendingFetchRevalidations);let{results,loaderResults,fetcherResults}=await callLoadersAndMaybeResolveData(state.matches,matches,matchesToLoad,revalidatingFetchers,revalidationRequest);if(abortController.signal.aborted){return;}abortController.signal.removeEventListener(\"abort\",abortPendingFetchRevalidations);fetchReloadIds.delete(key);fetchControllers.delete(key);revalidatingFetchers.forEach(r=>fetchControllers.delete(r.key));let redirect=findRedirect(results);if(redirect){return startRedirectNavigation(state,redirect);}// Process and commit output from loaders\nlet{loaderData,errors}=processLoaderData(state,state.matches,matchesToLoad,loaderResults,undefined,revalidatingFetchers,fetcherResults,activeDeferreds);let doneFetcher={state:\"idle\",data:actionResult.data,formMethod:undefined,formAction:undefined,formEncType:undefined,formData:undefined,\" _hasFetcherDoneAnything \":true};state.fetchers.set(key,doneFetcher);let didAbortFetchLoads=abortStaleFetchLoads(loadId);// If we are currently in a navigation loading state and this fetcher is\n// more recent than the navigation, we want the newer data so abort the\n// navigation and complete it with the fetcher data\nif(state.navigation.state===\"loading\"&&loadId>pendingNavigationLoadId){invariant(pendingAction,\"Expected pending action\");pendingNavigationController&&pendingNavigationController.abort();completeNavigation(state.navigation.location,{matches,loaderData,errors,fetchers:new Map(state.fetchers)});}else{// otherwise just update with the fetcher data, preserving any existing\n// loaderData for loaders that did not need to reload.  We have to\n// manually merge here since we aren't going through completeNavigation\nupdateState(_extends({errors,loaderData:mergeLoaderData(state.loaderData,loaderData,matches,errors)},didAbortFetchLoads?{fetchers:new Map(state.fetchers)}:{}));isRevalidationRequired=false;}}// Call the matched loader for fetcher.load(), handling redirects, errors, etc.\nasync function handleFetcherLoader(key,routeId,path,match,matches,submission){let existingFetcher=state.fetchers.get(key);// Put this fetcher into it's loading state\nlet loadingFetcher=_extends({state:\"loading\",formMethod:undefined,formAction:undefined,formEncType:undefined,formData:undefined},submission,{data:existingFetcher&&existingFetcher.data,\" _hasFetcherDoneAnything \":true});state.fetchers.set(key,loadingFetcher);updateState({fetchers:new Map(state.fetchers)});// Call the loader for this fetcher route match\nlet abortController=new AbortController();let fetchRequest=createClientSideRequest(init.history,path,abortController.signal);fetchControllers.set(key,abortController);let result=await callLoaderOrAction(\"loader\",fetchRequest,match,matches,manifest,mapRouteProperties,basename);// Deferred isn't supported for fetcher loads, await everything and treat it\n// as a normal load.  resolveDeferredData will return undefined if this\n// fetcher gets aborted, so we just leave result untouched and short circuit\n// below if that happens\nif(isDeferredResult(result)){result=(await resolveDeferredData(result,fetchRequest.signal,true))||result;}// We can delete this so long as we weren't aborted by our our own fetcher\n// re-load which would have put _new_ controller is in fetchControllers\nif(fetchControllers.get(key)===abortController){fetchControllers.delete(key);}if(fetchRequest.signal.aborted){return;}// If the loader threw a redirect Response, start a new REPLACE navigation\nif(isRedirectResult(result)){fetchRedirectIds.add(key);await startRedirectNavigation(state,result);return;}// Process any non-redirect errors thrown\nif(isErrorResult(result)){let boundaryMatch=findNearestBoundary(state.matches,routeId);state.fetchers.delete(key);// TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n// do we need to behave any differently with our non-redirect errors?\n// What if it was a non-redirect Response?\nupdateState({fetchers:new Map(state.fetchers),errors:{[boundaryMatch.route.id]:result.error}});return;}invariant(!isDeferredResult(result),\"Unhandled fetcher deferred data\");// Put the fetcher back into an idle state\nlet doneFetcher={state:\"idle\",data:result.data,formMethod:undefined,formAction:undefined,formEncType:undefined,formData:undefined,\" _hasFetcherDoneAnything \":true};state.fetchers.set(key,doneFetcher);updateState({fetchers:new Map(state.fetchers)});}/**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */async function startRedirectNavigation(state,redirect,_temp){var _window;let{submission,replace,isFetchActionRedirect}=_temp===void 0?{}:_temp;if(redirect.revalidate){isRevalidationRequired=true;}let redirectLocation=createLocation(state.location,redirect.location,// TODO: This can be removed once we get rid of useTransition in Remix v2\n_extends({_isRedirect:true},isFetchActionRedirect?{_isFetchActionRedirect:true}:{}));invariant(redirectLocation,\"Expected a location on the redirect navigation\");// Check if this an absolute external redirect that goes to a new origin\nif(ABSOLUTE_URL_REGEX.test(redirect.location)&&isBrowser&&typeof((_window=window)==null?void 0:_window.location)!==\"undefined\"){let url=init.history.createURL(redirect.location);let isDifferentBasename=stripBasename(url.pathname,basename)==null;if(window.location.origin!==url.origin||isDifferentBasename){if(replace){window.location.replace(redirect.location);}else{window.location.assign(redirect.location);}return;}}// There's no need to abort on redirects, since we don't detect the\n// redirect until the action/loaders have settled\npendingNavigationController=null;let redirectHistoryAction=replace===true?Action.Replace:Action.Push;// Use the incoming submission if provided, fallback on the active one in\n// state.navigation\nlet{formMethod,formAction,formEncType,formData}=state.navigation;if(!submission&&formMethod&&formAction&&formData&&formEncType){submission={formMethod,formAction,formEncType,formData};}// If this was a 307/308 submission we want to preserve the HTTP method and\n// re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n// redirected location\nif(redirectPreserveMethodStatusCodes.has(redirect.status)&&submission&&isMutationMethod(submission.formMethod)){await startNavigation(redirectHistoryAction,redirectLocation,{submission:_extends({},submission,{formAction:redirect.location}),// Preserve this flag across redirects\npreventScrollReset:pendingPreventScrollReset});}else if(isFetchActionRedirect){// For a fetch action redirect, we kick off a new loading navigation\n// without the fetcher submission, but we send it along for shouldRevalidate\nawait startNavigation(redirectHistoryAction,redirectLocation,{overrideNavigation:{state:\"loading\",location:redirectLocation,formMethod:undefined,formAction:undefined,formEncType:undefined,formData:undefined},fetcherSubmission:submission,// Preserve this flag across redirects\npreventScrollReset:pendingPreventScrollReset});}else{// Otherwise, we kick off a new loading navigation, preserving the\n// submission info for the duration of this navigation\nawait startNavigation(redirectHistoryAction,redirectLocation,{overrideNavigation:{state:\"loading\",location:redirectLocation,formMethod:submission?submission.formMethod:undefined,formAction:submission?submission.formAction:undefined,formEncType:submission?submission.formEncType:undefined,formData:submission?submission.formData:undefined},// Preserve this flag across redirects\npreventScrollReset:pendingPreventScrollReset});}}async function callLoadersAndMaybeResolveData(currentMatches,matches,matchesToLoad,fetchersToLoad,request){// Call all navigation loaders and revalidating fetcher loaders in parallel,\n// then slice off the results into separate arrays so we can handle them\n// accordingly\nlet results=await Promise.all([...matchesToLoad.map(match=>callLoaderOrAction(\"loader\",request,match,matches,manifest,mapRouteProperties,basename)),...fetchersToLoad.map(f=>{if(f.matches&&f.match&&f.controller){return callLoaderOrAction(\"loader\",createClientSideRequest(init.history,f.path,f.controller.signal),f.match,f.matches,manifest,mapRouteProperties,basename);}else{let error={type:ResultType.error,error:getInternalRouterError(404,{pathname:f.path})};return error;}})]);let loaderResults=results.slice(0,matchesToLoad.length);let fetcherResults=results.slice(matchesToLoad.length);await Promise.all([resolveDeferredResults(currentMatches,matchesToLoad,loaderResults,loaderResults.map(()=>request.signal),false,state.loaderData),resolveDeferredResults(currentMatches,fetchersToLoad.map(f=>f.match),fetcherResults,fetchersToLoad.map(f=>f.controller?f.controller.signal:null),true)]);return{results,loaderResults,fetcherResults};}function interruptActiveLoads(){// Every interruption triggers a revalidation\nisRevalidationRequired=true;// Cancel pending route-level deferreds and mark cancelled routes for\n// revalidation\ncancelledDeferredRoutes.push(...cancelActiveDeferreds());// Abort in-flight fetcher loads\nfetchLoadMatches.forEach((_,key)=>{if(fetchControllers.has(key)){cancelledFetcherLoads.push(key);abortFetcher(key);}});}function setFetcherError(key,routeId,error){let boundaryMatch=findNearestBoundary(state.matches,routeId);deleteFetcher(key);updateState({errors:{[boundaryMatch.route.id]:error},fetchers:new Map(state.fetchers)});}function deleteFetcher(key){if(fetchControllers.has(key))abortFetcher(key);fetchLoadMatches.delete(key);fetchReloadIds.delete(key);fetchRedirectIds.delete(key);state.fetchers.delete(key);}function abortFetcher(key){let controller=fetchControllers.get(key);invariant(controller,\"Expected fetch controller: \"+key);controller.abort();fetchControllers.delete(key);}function markFetchersDone(keys){for(let key of keys){let fetcher=getFetcher(key);let doneFetcher={state:\"idle\",data:fetcher.data,formMethod:undefined,formAction:undefined,formEncType:undefined,formData:undefined,\" _hasFetcherDoneAnything \":true};state.fetchers.set(key,doneFetcher);}}function markFetchRedirectsDone(){let doneKeys=[];let updatedFetchers=false;for(let key of fetchRedirectIds){let fetcher=state.fetchers.get(key);invariant(fetcher,\"Expected fetcher: \"+key);if(fetcher.state===\"loading\"){fetchRedirectIds.delete(key);doneKeys.push(key);updatedFetchers=true;}}markFetchersDone(doneKeys);return updatedFetchers;}function abortStaleFetchLoads(landedId){let yeetedKeys=[];for(let[key,id]of fetchReloadIds){if(id<landedId){let fetcher=state.fetchers.get(key);invariant(fetcher,\"Expected fetcher: \"+key);if(fetcher.state===\"loading\"){abortFetcher(key);fetchReloadIds.delete(key);yeetedKeys.push(key);}}}markFetchersDone(yeetedKeys);return yeetedKeys.length>0;}function getBlocker(key,fn){let blocker=state.blockers.get(key)||IDLE_BLOCKER;if(blockerFunctions.get(key)!==fn){blockerFunctions.set(key,fn);}return blocker;}function deleteBlocker(key){state.blockers.delete(key);blockerFunctions.delete(key);}// Utility function to update blockers, ensuring valid state transitions\nfunction updateBlocker(key,newBlocker){let blocker=state.blockers.get(key)||IDLE_BLOCKER;// Poor mans state machine :)\n// https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\ninvariant(blocker.state===\"unblocked\"&&newBlocker.state===\"blocked\"||blocker.state===\"blocked\"&&newBlocker.state===\"blocked\"||blocker.state===\"blocked\"&&newBlocker.state===\"proceeding\"||blocker.state===\"blocked\"&&newBlocker.state===\"unblocked\"||blocker.state===\"proceeding\"&&newBlocker.state===\"unblocked\",\"Invalid blocker state transition: \"+blocker.state+\" -> \"+newBlocker.state);state.blockers.set(key,newBlocker);updateState({blockers:new Map(state.blockers)});}function shouldBlockNavigation(_ref2){let{currentLocation,nextLocation,historyAction}=_ref2;if(blockerFunctions.size===0){return;}// We ony support a single active blocker at the moment since we don't have\n// any compelling use cases for multi-blocker yet\nif(blockerFunctions.size>1){warning(false,\"A router only supports one blocker at a time\");}let entries=Array.from(blockerFunctions.entries());let[blockerKey,blockerFunction]=entries[entries.length-1];let blocker=state.blockers.get(blockerKey);if(blocker&&blocker.state===\"proceeding\"){// If the blocker is currently proceeding, we don't need to re-check\n// it and can let this navigation continue\nreturn;}// At this point, we know we're unblocked/blocked so we need to check the\n// user-provided blocker function\nif(blockerFunction({currentLocation,nextLocation,historyAction})){return blockerKey;}}function cancelActiveDeferreds(predicate){let cancelledRouteIds=[];activeDeferreds.forEach((dfd,routeId)=>{if(!predicate||predicate(routeId)){// Cancel the deferred - but do not remove from activeDeferreds here -\n// we rely on the subscribers to do that so our tests can assert proper\n// cleanup via _internalActiveDeferreds\ndfd.cancel();cancelledRouteIds.push(routeId);activeDeferreds.delete(routeId);}});return cancelledRouteIds;}// Opt in to capturing and reporting scroll positions during navigations,\n// used by the <ScrollRestoration> component\nfunction enableScrollRestoration(positions,getPosition,getKey){savedScrollPositions=positions;getScrollPosition=getPosition;getScrollRestorationKey=getKey||(location=>location.key);// Perform initial hydration scroll restoration, since we miss the boat on\n// the initial updateState() because we've not yet rendered <ScrollRestoration/>\n// and therefore have no savedScrollPositions available\nif(!initialScrollRestored&&state.navigation===IDLE_NAVIGATION){initialScrollRestored=true;let y=getSavedScrollPosition(state.location,state.matches);if(y!=null){updateState({restoreScrollPosition:y});}}return()=>{savedScrollPositions=null;getScrollPosition=null;getScrollRestorationKey=null;};}function saveScrollPosition(location,matches){if(savedScrollPositions&&getScrollRestorationKey&&getScrollPosition){let userMatches=matches.map(m=>createUseMatchesMatch(m,state.loaderData));let key=getScrollRestorationKey(location,userMatches)||location.key;savedScrollPositions[key]=getScrollPosition();}}function getSavedScrollPosition(location,matches){if(savedScrollPositions&&getScrollRestorationKey&&getScrollPosition){let userMatches=matches.map(m=>createUseMatchesMatch(m,state.loaderData));let key=getScrollRestorationKey(location,userMatches)||location.key;let y=savedScrollPositions[key];if(typeof y===\"number\"){return y;}}return null;}function _internalSetRoutes(newRoutes){inFlightDataRoutes=newRoutes;}router={get basename(){return basename;},get state(){return state;},get routes(){return dataRoutes;},initialize,subscribe,enableScrollRestoration,navigate,fetch,revalidate,// Passthrough to history-aware createHref used by useHref so we get proper\n// hash-aware URLs in DOM paths\ncreateHref:to=>init.history.createHref(to),encodeLocation:to=>init.history.encodeLocation(to),getFetcher,deleteFetcher,dispose,getBlocker,deleteBlocker,_internalFetchControllers:fetchControllers,_internalActiveDeferreds:activeDeferreds,// TODO: Remove setRoutes, it's temporary to avoid dealing with\n// updating the tree while validating the update algorithm.\n_internalSetRoutes};return router;}//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL=Symbol(\"deferred\");function createStaticHandler(routes,opts){invariant(routes.length>0,\"You must provide a non-empty routes array to createStaticHandler\");let manifest={};let basename=(opts?opts.basename:null)||\"/\";let mapRouteProperties;if(opts!=null&&opts.mapRouteProperties){mapRouteProperties=opts.mapRouteProperties;}else if(opts!=null&&opts.detectErrorBoundary){// If they are still using the deprecated version, wrap it with the new API\nlet detectErrorBoundary=opts.detectErrorBoundary;mapRouteProperties=route=>({hasErrorBoundary:detectErrorBoundary(route)});}else{mapRouteProperties=defaultMapRouteProperties;}let dataRoutes=convertRoutesToDataRoutes(routes,mapRouteProperties,undefined,manifest);/**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */async function query(request,_temp2){let{requestContext}=_temp2===void 0?{}:_temp2;let url=new URL(request.url);let method=request.method;let location=createLocation(\"\",createPath(url),null,\"default\");let matches=matchRoutes(dataRoutes,location,basename);// SSR supports HEAD requests while SPA doesn't\nif(!isValidMethod(method)&&method!==\"HEAD\"){let error=getInternalRouterError(405,{method});let{matches:methodNotAllowedMatches,route}=getShortCircuitMatches(dataRoutes);return{basename,location,matches:methodNotAllowedMatches,loaderData:{},actionData:null,errors:{[route.id]:error},statusCode:error.status,loaderHeaders:{},actionHeaders:{},activeDeferreds:null};}else if(!matches){let error=getInternalRouterError(404,{pathname:location.pathname});let{matches:notFoundMatches,route}=getShortCircuitMatches(dataRoutes);return{basename,location,matches:notFoundMatches,loaderData:{},actionData:null,errors:{[route.id]:error},statusCode:error.status,loaderHeaders:{},actionHeaders:{},activeDeferreds:null};}let result=await queryImpl(request,location,matches,requestContext);if(isResponse(result)){return result;}// When returning StaticHandlerContext, we patch back in the location here\n// since we need it for React Context.  But this helps keep our submit and\n// loadRouteData operating on a Request instead of a Location\nreturn _extends({location,basename},result);}/**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */async function queryRoute(request,_temp3){let{routeId,requestContext}=_temp3===void 0?{}:_temp3;let url=new URL(request.url);let method=request.method;let location=createLocation(\"\",createPath(url),null,\"default\");let matches=matchRoutes(dataRoutes,location,basename);// SSR supports HEAD requests while SPA doesn't\nif(!isValidMethod(method)&&method!==\"HEAD\"&&method!==\"OPTIONS\"){throw getInternalRouterError(405,{method});}else if(!matches){throw getInternalRouterError(404,{pathname:location.pathname});}let match=routeId?matches.find(m=>m.route.id===routeId):getTargetMatch(matches,location);if(routeId&&!match){throw getInternalRouterError(403,{pathname:location.pathname,routeId});}else if(!match){// This should never hit I don't think?\nthrow getInternalRouterError(404,{pathname:location.pathname});}let result=await queryImpl(request,location,matches,requestContext,match);if(isResponse(result)){return result;}let error=result.errors?Object.values(result.errors)[0]:undefined;if(error!==undefined){// If we got back result.errors, that means the loader/action threw\n// _something_ that wasn't a Response, but it's not guaranteed/required\n// to be an `instanceof Error` either, so we have to use throw here to\n// preserve the \"error\" state outside of queryImpl.\nthrow error;}// Pick off the right state value to return\nif(result.actionData){return Object.values(result.actionData)[0];}if(result.loaderData){var _result$activeDeferre;let data=Object.values(result.loaderData)[0];if((_result$activeDeferre=result.activeDeferreds)!=null&&_result$activeDeferre[match.route.id]){data[UNSAFE_DEFERRED_SYMBOL]=result.activeDeferreds[match.route.id];}return data;}return undefined;}async function queryImpl(request,location,matches,requestContext,routeMatch){invariant(request.signal,\"query()/queryRoute() requests must contain an AbortController signal\");try{if(isMutationMethod(request.method.toLowerCase())){let result=await submit(request,matches,routeMatch||getTargetMatch(matches,location),requestContext,routeMatch!=null);return result;}let result=await loadRouteData(request,matches,requestContext,routeMatch);return isResponse(result)?result:_extends({},result,{actionData:null,actionHeaders:{}});}catch(e){// If the user threw/returned a Response in callLoaderOrAction, we throw\n// it to bail out and then return or throw here based on whether the user\n// returned or threw\nif(isQueryRouteResponse(e)){if(e.type===ResultType.error&&!isRedirectResponse(e.response)){throw e.response;}return e.response;}// Redirects are always returned since they don't propagate to catch\n// boundaries\nif(isRedirectResponse(e)){return e;}throw e;}}async function submit(request,matches,actionMatch,requestContext,isRouteRequest){let result;if(!actionMatch.route.action&&!actionMatch.route.lazy){let error=getInternalRouterError(405,{method:request.method,pathname:new URL(request.url).pathname,routeId:actionMatch.route.id});if(isRouteRequest){throw error;}result={type:ResultType.error,error};}else{result=await callLoaderOrAction(\"action\",request,actionMatch,matches,manifest,mapRouteProperties,basename,true,isRouteRequest,requestContext);if(request.signal.aborted){let method=isRouteRequest?\"queryRoute\":\"query\";throw new Error(method+\"() call aborted\");}}if(isRedirectResult(result)){// Uhhhh - this should never happen, we should always throw these from\n// callLoaderOrAction, but the type narrowing here keeps TS happy and we\n// can get back on the \"throw all redirect responses\" train here should\n// this ever happen :/\nthrow new Response(null,{status:result.status,headers:{Location:result.location}});}if(isDeferredResult(result)){let error=getInternalRouterError(400,{type:\"defer-action\"});if(isRouteRequest){throw error;}result={type:ResultType.error,error};}if(isRouteRequest){// Note: This should only be non-Response values if we get here, since\n// isRouteRequest should throw any Response received in callLoaderOrAction\nif(isErrorResult(result)){throw result.error;}return{matches:[actionMatch],loaderData:{},actionData:{[actionMatch.route.id]:result.data},errors:null,// Note: statusCode + headers are unused here since queryRoute will\n// return the raw Response or value\nstatusCode:200,loaderHeaders:{},actionHeaders:{},activeDeferreds:null};}if(isErrorResult(result)){// Store off the pending error - we use it to determine which loaders\n// to call and will commit it when we complete the navigation\nlet boundaryMatch=findNearestBoundary(matches,actionMatch.route.id);let context=await loadRouteData(request,matches,requestContext,undefined,{[boundaryMatch.route.id]:result.error});// action status codes take precedence over loader status codes\nreturn _extends({},context,{statusCode:isRouteErrorResponse(result.error)?result.error.status:500,actionData:null,actionHeaders:_extends({},result.headers?{[actionMatch.route.id]:result.headers}:{})});}// Create a GET request for the loaders\nlet loaderRequest=new Request(request.url,{headers:request.headers,redirect:request.redirect,signal:request.signal});let context=await loadRouteData(loaderRequest,matches,requestContext);return _extends({},context,result.statusCode?{statusCode:result.statusCode}:{},{actionData:{[actionMatch.route.id]:result.data},actionHeaders:_extends({},result.headers?{[actionMatch.route.id]:result.headers}:{})});}async function loadRouteData(request,matches,requestContext,routeMatch,pendingActionError){let isRouteRequest=routeMatch!=null;// Short circuit if we have no loaders to run (queryRoute())\nif(isRouteRequest&&!(routeMatch!=null&&routeMatch.route.loader)&&!(routeMatch!=null&&routeMatch.route.lazy)){throw getInternalRouterError(400,{method:request.method,pathname:new URL(request.url).pathname,routeId:routeMatch==null?void 0:routeMatch.route.id});}let requestMatches=routeMatch?[routeMatch]:getLoaderMatchesUntilBoundary(matches,Object.keys(pendingActionError||{})[0]);let matchesToLoad=requestMatches.filter(m=>m.route.loader||m.route.lazy);// Short circuit if we have no loaders to run (query())\nif(matchesToLoad.length===0){return{matches,// Add a null for all matched routes for proper revalidation on the client\nloaderData:matches.reduce((acc,m)=>Object.assign(acc,{[m.route.id]:null}),{}),errors:pendingActionError||null,statusCode:200,loaderHeaders:{},activeDeferreds:null};}let results=await Promise.all([...matchesToLoad.map(match=>callLoaderOrAction(\"loader\",request,match,matches,manifest,mapRouteProperties,basename,true,isRouteRequest,requestContext))]);if(request.signal.aborted){let method=isRouteRequest?\"queryRoute\":\"query\";throw new Error(method+\"() call aborted\");}// Process and commit output from loaders\nlet activeDeferreds=new Map();let context=processRouteLoaderData(matches,matchesToLoad,results,pendingActionError,activeDeferreds);// Add a null for any non-loader matches for proper revalidation on the client\nlet executedLoaders=new Set(matchesToLoad.map(match=>match.route.id));matches.forEach(match=>{if(!executedLoaders.has(match.route.id)){context.loaderData[match.route.id]=null;}});return _extends({},context,{matches,activeDeferreds:activeDeferreds.size>0?Object.fromEntries(activeDeferreds.entries()):null});}return{dataRoutes,query,queryRoute};}//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */function getStaticContextFromError(routes,context,error){let newContext=_extends({},context,{statusCode:500,errors:{[context._deepestRenderedBoundaryId||routes[0].id]:error}});return newContext;}function isSubmissionNavigation(opts){return opts!=null&&\"formData\"in opts;}function normalizeTo(location,matches,basename,prependBasename,to,fromRouteId,relative){let contextualMatches;let activeRouteMatch;if(fromRouteId!=null&&relative!==\"path\"){// Grab matches up to the calling route so our route-relative logic is\n// relative to the correct source route.  When using relative:path,\n// fromRouteId is ignored since that is always relative to the current\n// location path\ncontextualMatches=[];for(let match of matches){contextualMatches.push(match);if(match.route.id===fromRouteId){activeRouteMatch=match;break;}}}else{contextualMatches=matches;activeRouteMatch=matches[matches.length-1];}// Resolve the relative path\nlet path=resolveTo(to?to:\".\",getPathContributingMatches(contextualMatches).map(m=>m.pathnameBase),stripBasename(location.pathname,basename)||location.pathname,relative===\"path\");// When `to` is not specified we inherit search/hash from the current\n// location, unlike when to=\".\" and we just inherit the path.\n// See https://github.com/remix-run/remix/issues/927\nif(to==null){path.search=location.search;path.hash=location.hash;}// Add an ?index param for matched index routes if we don't already have one\nif((to==null||to===\"\"||to===\".\")&&activeRouteMatch&&activeRouteMatch.route.index&&!hasNakedIndexQuery(path.search)){path.search=path.search?path.search.replace(/^\\?/,\"?index&\"):\"?index\";}// If we're operating within a basename, prepend it to the pathname.  If\n// this is a root navigation, then just use the raw basename which allows\n// the basename to have full control over the presence of a trailing slash\n// on root actions\nif(prependBasename&&basename!==\"/\"){path.pathname=path.pathname===\"/\"?basename:joinPaths([basename,path.pathname]);}return createPath(path);}// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod,isFetcher,path,opts){// Return location verbatim on non-submission navigations\nif(!opts||!isSubmissionNavigation(opts)){return{path};}if(opts.formMethod&&!isValidMethod(opts.formMethod)){return{path,error:getInternalRouterError(405,{method:opts.formMethod})};}// Create a Submission on non-GET navigations\nlet submission;if(opts.formData){let formMethod=opts.formMethod||\"get\";submission={formMethod:normalizeFormMethod?formMethod.toUpperCase():formMethod.toLowerCase(),formAction:stripHashFromPath(path),formEncType:opts&&opts.formEncType||\"application/x-www-form-urlencoded\",formData:opts.formData};if(isMutationMethod(submission.formMethod)){return{path,submission};}}// Flatten submission onto URLSearchParams for GET submissions\nlet parsedPath=parsePath(path);let searchParams=convertFormDataToSearchParams(opts.formData);// On GET navigation submissions we can drop the ?index param from the\n// resulting location since all loaders will run.  But fetcher GET submissions\n// only run a single loader so we need to preserve any incoming ?index params\nif(isFetcher&&parsedPath.search&&hasNakedIndexQuery(parsedPath.search)){searchParams.append(\"index\",\"\");}parsedPath.search=\"?\"+searchParams;return{path:createPath(parsedPath),submission};}// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches,boundaryId){let boundaryMatches=matches;if(boundaryId){let index=matches.findIndex(m=>m.route.id===boundaryId);if(index>=0){boundaryMatches=matches.slice(0,index);}}return boundaryMatches;}function getMatchesToLoad(history,state,matches,submission,location,isRevalidationRequired,cancelledDeferredRoutes,cancelledFetcherLoads,fetchLoadMatches,routesToUse,basename,pendingActionData,pendingError){let actionResult=pendingError?Object.values(pendingError)[0]:pendingActionData?Object.values(pendingActionData)[0]:undefined;let currentUrl=history.createURL(state.location);let nextUrl=history.createURL(location);// Pick navigation matches that are net-new or qualify for revalidation\nlet boundaryId=pendingError?Object.keys(pendingError)[0]:undefined;let boundaryMatches=getLoaderMatchesUntilBoundary(matches,boundaryId);let navigationMatches=boundaryMatches.filter((match,index)=>{if(match.route.lazy){// We haven't loaded this route yet so we don't know if it's got a loader!\nreturn true;}if(match.route.loader==null){return false;}// Always call the loader on new route instances and pending defer cancellations\nif(isNewLoader(state.loaderData,state.matches[index],match)||cancelledDeferredRoutes.some(id=>id===match.route.id)){return true;}// This is the default implementation for when we revalidate.  If the route\n// provides it's own implementation, then we give them full control but\n// provide this value so they can leverage it if needed after they check\n// their own specific use cases\nlet currentRouteMatch=state.matches[index];let nextRouteMatch=match;return shouldRevalidateLoader(match,_extends({currentUrl,currentParams:currentRouteMatch.params,nextUrl,nextParams:nextRouteMatch.params},submission,{actionResult,defaultShouldRevalidate:// Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\nisRevalidationRequired||// Clicked the same link, resubmitted a GET form\ncurrentUrl.pathname+currentUrl.search===nextUrl.pathname+nextUrl.search||// Search params affect all loaders\ncurrentUrl.search!==nextUrl.search||isNewRouteInstance(currentRouteMatch,nextRouteMatch)}));});// Pick fetcher.loads that need to be revalidated\nlet revalidatingFetchers=[];fetchLoadMatches.forEach((f,key)=>{// Don't revalidate if fetcher won't be present in the subsequent render\nif(!matches.some(m=>m.route.id===f.routeId)){return;}let fetcherMatches=matchRoutes(routesToUse,f.path,basename);// If the fetcher path no longer matches, push it in with null matches so\n// we can trigger a 404 in callLoadersAndMaybeResolveData\nif(!fetcherMatches){revalidatingFetchers.push({key,routeId:f.routeId,path:f.path,matches:null,match:null,controller:null});return;}let fetcherMatch=getTargetMatch(fetcherMatches,f.path);if(cancelledFetcherLoads.includes(key)){revalidatingFetchers.push({key,routeId:f.routeId,path:f.path,matches:fetcherMatches,match:fetcherMatch,controller:new AbortController()});return;}// Revalidating fetchers are decoupled from the route matches since they\n// hit a static href, so they _always_ check shouldRevalidate and the\n// default is strictly if a revalidation is explicitly required (action\n// submissions, useRevalidator, X-Remix-Revalidate).\nlet shouldRevalidate=shouldRevalidateLoader(fetcherMatch,_extends({currentUrl,currentParams:state.matches[state.matches.length-1].params,nextUrl,nextParams:matches[matches.length-1].params},submission,{actionResult,// Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\ndefaultShouldRevalidate:isRevalidationRequired}));if(shouldRevalidate){revalidatingFetchers.push({key,routeId:f.routeId,path:f.path,matches:fetcherMatches,match:fetcherMatch,controller:new AbortController()});}});return[navigationMatches,revalidatingFetchers];}function isNewLoader(currentLoaderData,currentMatch,match){let isNew=// [a] -> [a, b]\n!currentMatch||// [a, b] -> [a, c]\nmatch.route.id!==currentMatch.route.id;// Handle the case that we don't have data for a re-used route, potentially\n// from a prior error or from a cancelled pending deferred\nlet isMissingData=currentLoaderData[match.route.id]===undefined;// Always load if this is a net-new route or we don't yet have data\nreturn isNew||isMissingData;}function isNewRouteInstance(currentMatch,match){let currentPath=currentMatch.route.path;return(// param change for this match, /users/123 -> /users/456\ncurrentMatch.pathname!==match.pathname||// splat param changed, which is not present in match.path\n// e.g. /files/images/avatar.jpg -> files/finances.xls\ncurrentPath!=null&&currentPath.endsWith(\"*\")&&currentMatch.params[\"*\"]!==match.params[\"*\"]);}function shouldRevalidateLoader(loaderMatch,arg){if(loaderMatch.route.shouldRevalidate){let routeChoice=loaderMatch.route.shouldRevalidate(arg);if(typeof routeChoice===\"boolean\"){return routeChoice;}}return arg.defaultShouldRevalidate;}/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */async function loadLazyRouteModule(route,mapRouteProperties,manifest){if(!route.lazy){return;}let lazyRoute=await route.lazy();// If the lazy route function was executed and removed by another parallel\n// call then we can return - first lazy() to finish wins because the return\n// value of lazy is expected to be static\nif(!route.lazy){return;}let routeToUpdate=manifest[route.id];invariant(routeToUpdate,\"No route found in manifest\");// Update the route in place.  This should be safe because there's no way\n// we could yet be sitting on this route as we can't get there without\n// resolving lazy() first.\n//\n// This is different than the HMR \"update\" use-case where we may actively be\n// on the route being updated.  The main concern boils down to \"does this\n// mutation affect any ongoing navigations or any current state.matches\n// values?\".  If not, it should be safe to update in place.\nlet routeUpdates={};for(let lazyRouteProperty in lazyRoute){let staticRouteValue=routeToUpdate[lazyRouteProperty];let isPropertyStaticallyDefined=staticRouteValue!==undefined&&// This property isn't static since it should always be updated based\n// on the route updates\nlazyRouteProperty!==\"hasErrorBoundary\";warning(!isPropertyStaticallyDefined,\"Route \\\"\"+routeToUpdate.id+\"\\\" has a static property \\\"\"+lazyRouteProperty+\"\\\" \"+\"defined but its lazy function is also returning a value for this property. \"+(\"The lazy route property \\\"\"+lazyRouteProperty+\"\\\" will be ignored.\"));if(!isPropertyStaticallyDefined&&!immutableRouteKeys.has(lazyRouteProperty)){routeUpdates[lazyRouteProperty]=lazyRoute[lazyRouteProperty];}}// Mutate the route with the provided updates.  Do this first so we pass\n// the updated version to mapRouteProperties\nObject.assign(routeToUpdate,routeUpdates);// Mutate the `hasErrorBoundary` property on the route based on the route\n// updates and remove the `lazy` function so we don't resolve the lazy\n// route again.\nObject.assign(routeToUpdate,_extends({},mapRouteProperties(routeToUpdate),{lazy:undefined}));}async function callLoaderOrAction(type,request,match,matches,manifest,mapRouteProperties,basename,isStaticRequest,isRouteRequest,requestContext){if(isStaticRequest===void 0){isStaticRequest=false;}if(isRouteRequest===void 0){isRouteRequest=false;}let resultType;let result;let onReject;let runHandler=handler=>{// Setup a promise we can race against so that abort signals short circuit\nlet reject;let abortPromise=new Promise((_,r)=>reject=r);onReject=()=>reject();request.signal.addEventListener(\"abort\",onReject);return Promise.race([handler({request,params:match.params,context:requestContext}),abortPromise]);};try{let handler=match.route[type];if(match.route.lazy){if(handler){// Run statically defined handler in parallel with lazy()\nlet values=await Promise.all([runHandler(handler),loadLazyRouteModule(match.route,mapRouteProperties,manifest)]);result=values[0];}else{// Load lazy route module, then run any returned handler\nawait loadLazyRouteModule(match.route,mapRouteProperties,manifest);handler=match.route[type];if(handler){// Handler still run even if we got interrupted to maintain consistency\n// with un-abortable behavior of handler execution on non-lazy or\n// previously-lazy-loaded routes\nresult=await runHandler(handler);}else if(type===\"action\"){let url=new URL(request.url);let pathname=url.pathname+url.search;throw getInternalRouterError(405,{method:request.method,pathname,routeId:match.route.id});}else{// lazy() route has no loader to run.  Short circuit here so we don't\n// hit the invariant below that errors on returning undefined.\nreturn{type:ResultType.data,data:undefined};}}}else if(!handler){let url=new URL(request.url);let pathname=url.pathname+url.search;throw getInternalRouterError(404,{pathname});}else{result=await runHandler(handler);}invariant(result!==undefined,\"You defined \"+(type===\"action\"?\"an action\":\"a loader\")+\" for route \"+(\"\\\"\"+match.route.id+\"\\\" but didn't return anything from your `\"+type+\"` \")+\"function. Please return a value or `null`.\");}catch(e){resultType=ResultType.error;result=e;}finally{if(onReject){request.signal.removeEventListener(\"abort\",onReject);}}if(isResponse(result)){let status=result.status;// Process redirects\nif(redirectStatusCodes.has(status)){let location=result.headers.get(\"Location\");invariant(location,\"Redirects returned/thrown from loaders/actions must have a Location header\");// Support relative routing in internal redirects\nif(!ABSOLUTE_URL_REGEX.test(location)){location=normalizeTo(new URL(request.url),matches.slice(0,matches.indexOf(match)+1),basename,true,location);}else if(!isStaticRequest){// Strip off the protocol+origin for same-origin + same-basename absolute\n// redirects. If this is a static request, we can let it go back to the\n// browser as-is\nlet currentUrl=new URL(request.url);let url=location.startsWith(\"//\")?new URL(currentUrl.protocol+location):new URL(location);let isSameBasename=stripBasename(url.pathname,basename)!=null;if(url.origin===currentUrl.origin&&isSameBasename){location=url.pathname+url.search+url.hash;}}// Don't process redirects in the router during static requests requests.\n// Instead, throw the Response and let the server handle it with an HTTP\n// redirect.  We also update the Location header in place in this flow so\n// basename and relative routing is taken into account\nif(isStaticRequest){result.headers.set(\"Location\",location);throw result;}return{type:ResultType.redirect,status,location,revalidate:result.headers.get(\"X-Remix-Revalidate\")!==null};}// For SSR single-route requests, we want to hand Responses back directly\n// without unwrapping.  We do this with the QueryRouteResponse wrapper\n// interface so we can know whether it was returned or thrown\nif(isRouteRequest){// eslint-disable-next-line no-throw-literal\nthrow{type:resultType||ResultType.data,response:result};}let data;let contentType=result.headers.get(\"Content-Type\");// Check between word boundaries instead of startsWith() due to the last\n// paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\nif(contentType&&/\\bapplication\\/json\\b/.test(contentType)){data=await result.json();}else{data=await result.text();}if(resultType===ResultType.error){return{type:resultType,error:new ErrorResponse(status,result.statusText,data),headers:result.headers};}return{type:ResultType.data,data,statusCode:result.status,headers:result.headers};}if(resultType===ResultType.error){return{type:resultType,error:result};}if(isDeferredData(result)){var _result$init,_result$init2;return{type:ResultType.deferred,deferredData:result,statusCode:(_result$init=result.init)==null?void 0:_result$init.status,headers:((_result$init2=result.init)==null?void 0:_result$init2.headers)&&new Headers(result.init.headers)};}return{type:ResultType.data,data:result};}// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history,location,signal,submission){let url=history.createURL(stripHashFromPath(location)).toString();let init={signal};if(submission&&isMutationMethod(submission.formMethod)){let{formMethod,formEncType,formData}=submission;// Didn't think we needed this but it turns out unlike other methods, patch\n// won't be properly normalized to uppercase and results in a 405 error.\n// See: https://fetch.spec.whatwg.org/#concept-method\ninit.method=formMethod.toUpperCase();init.body=formEncType===\"application/x-www-form-urlencoded\"?convertFormDataToSearchParams(formData):formData;}// Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\nreturn new Request(url,init);}function convertFormDataToSearchParams(formData){let searchParams=new URLSearchParams();for(let[key,value]of formData.entries()){// https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\nsearchParams.append(key,value instanceof File?value.name:value);}return searchParams;}function processRouteLoaderData(matches,matchesToLoad,results,pendingError,activeDeferreds){// Fill in loaderData/errors from our loaders\nlet loaderData={};let errors=null;let statusCode;let foundError=false;let loaderHeaders={};// Process loader results into state.loaderData/state.errors\nresults.forEach((result,index)=>{let id=matchesToLoad[index].route.id;invariant(!isRedirectResult(result),\"Cannot handle redirect results in processLoaderData\");if(isErrorResult(result)){// Look upwards from the matched route for the closest ancestor\n// error boundary, defaulting to the root match\nlet boundaryMatch=findNearestBoundary(matches,id);let error=result.error;// If we have a pending action error, we report it at the highest-route\n// that throws a loader error, and then clear it out to indicate that\n// it was consumed\nif(pendingError){error=Object.values(pendingError)[0];pendingError=undefined;}errors=errors||{};// Prefer higher error values if lower errors bubble to the same boundary\nif(errors[boundaryMatch.route.id]==null){errors[boundaryMatch.route.id]=error;}// Clear our any prior loaderData for the throwing route\nloaderData[id]=undefined;// Once we find our first (highest) error, we set the status code and\n// prevent deeper status codes from overriding\nif(!foundError){foundError=true;statusCode=isRouteErrorResponse(result.error)?result.error.status:500;}if(result.headers){loaderHeaders[id]=result.headers;}}else{if(isDeferredResult(result)){activeDeferreds.set(id,result.deferredData);loaderData[id]=result.deferredData.data;}else{loaderData[id]=result.data;}// Error status codes always override success status codes, but if all\n// loaders are successful we take the deepest status code.\nif(result.statusCode!=null&&result.statusCode!==200&&!foundError){statusCode=result.statusCode;}if(result.headers){loaderHeaders[id]=result.headers;}}});// If we didn't consume the pending action error (i.e., all loaders\n// resolved), then consume it here.  Also clear out any loaderData for the\n// throwing route\nif(pendingError){errors=pendingError;loaderData[Object.keys(pendingError)[0]]=undefined;}return{loaderData,errors,statusCode:statusCode||200,loaderHeaders};}function processLoaderData(state,matches,matchesToLoad,results,pendingError,revalidatingFetchers,fetcherResults,activeDeferreds){let{loaderData,errors}=processRouteLoaderData(matches,matchesToLoad,results,pendingError,activeDeferreds);// Process results from our revalidating fetchers\nfor(let index=0;index<revalidatingFetchers.length;index++){let{key,match,controller}=revalidatingFetchers[index];invariant(fetcherResults!==undefined&&fetcherResults[index]!==undefined,\"Did not find corresponding fetcher result\");let result=fetcherResults[index];// Process fetcher non-redirect errors\nif(controller&&controller.signal.aborted){// Nothing to do for aborted fetchers\ncontinue;}else if(isErrorResult(result)){let boundaryMatch=findNearestBoundary(state.matches,match==null?void 0:match.route.id);if(!(errors&&errors[boundaryMatch.route.id])){errors=_extends({},errors,{[boundaryMatch.route.id]:result.error});}state.fetchers.delete(key);}else if(isRedirectResult(result)){// Should never get here, redirects should get processed above, but we\n// keep this to type narrow to a success result in the else\ninvariant(false,\"Unhandled fetcher revalidation redirect\");}else if(isDeferredResult(result)){// Should never get here, deferred data should be awaited for fetchers\n// in resolveDeferredResults\ninvariant(false,\"Unhandled fetcher deferred data\");}else{let doneFetcher={state:\"idle\",data:result.data,formMethod:undefined,formAction:undefined,formEncType:undefined,formData:undefined,\" _hasFetcherDoneAnything \":true};state.fetchers.set(key,doneFetcher);}}return{loaderData,errors};}function mergeLoaderData(loaderData,newLoaderData,matches,errors){let mergedLoaderData=_extends({},newLoaderData);for(let match of matches){let id=match.route.id;if(newLoaderData.hasOwnProperty(id)){if(newLoaderData[id]!==undefined){mergedLoaderData[id]=newLoaderData[id];}}else if(loaderData[id]!==undefined&&match.route.loader){// Preserve existing keys not included in newLoaderData and where a loader\n// wasn't removed by HMR\nmergedLoaderData[id]=loaderData[id];}if(errors&&errors.hasOwnProperty(id)){// Don't keep any loader data below the boundary\nbreak;}}return mergedLoaderData;}// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches,routeId){let eligibleMatches=routeId?matches.slice(0,matches.findIndex(m=>m.route.id===routeId)+1):[...matches];return eligibleMatches.reverse().find(m=>m.route.hasErrorBoundary===true)||matches[0];}function getShortCircuitMatches(routes){// Prefer a root layout route if present, otherwise shim in a route object\nlet route=routes.find(r=>r.index||!r.path||r.path===\"/\")||{id:\"__shim-error-route__\"};return{matches:[{params:{},pathname:\"\",pathnameBase:\"\",route}],route};}function getInternalRouterError(status,_temp4){let{pathname,routeId,method,type}=_temp4===void 0?{}:_temp4;let statusText=\"Unknown Server Error\";let errorMessage=\"Unknown @remix-run/router error\";if(status===400){statusText=\"Bad Request\";if(method&&pathname&&routeId){errorMessage=\"You made a \"+method+\" request to \\\"\"+pathname+\"\\\" but \"+(\"did not provide a `loader` for route \\\"\"+routeId+\"\\\", \")+\"so there is no way to handle the request.\";}else if(type===\"defer-action\"){errorMessage=\"defer() is not supported in actions\";}}else if(status===403){statusText=\"Forbidden\";errorMessage=\"Route \\\"\"+routeId+\"\\\" does not match URL \\\"\"+pathname+\"\\\"\";}else if(status===404){statusText=\"Not Found\";errorMessage=\"No route matches URL \\\"\"+pathname+\"\\\"\";}else if(status===405){statusText=\"Method Not Allowed\";if(method&&pathname&&routeId){errorMessage=\"You made a \"+method.toUpperCase()+\" request to \\\"\"+pathname+\"\\\" but \"+(\"did not provide an `action` for route \\\"\"+routeId+\"\\\", \")+\"so there is no way to handle the request.\";}else if(method){errorMessage=\"Invalid request method \\\"\"+method.toUpperCase()+\"\\\"\";}}return new ErrorResponse(status||500,statusText,new Error(errorMessage),true);}// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results){for(let i=results.length-1;i>=0;i--){let result=results[i];if(isRedirectResult(result)){return result;}}}function stripHashFromPath(path){let parsedPath=typeof path===\"string\"?parsePath(path):path;return createPath(_extends({},parsedPath,{hash:\"\"}));}function isHashChangeOnly(a,b){if(a.pathname!==b.pathname||a.search!==b.search){return false;}if(a.hash===\"\"){// No hash -> hash\nreturn b.hash!==\"\";}else if(a.hash===b.hash){// current hash -> same hash\nreturn true;}else if(b.hash!==\"\"){// current hash -> new hash\nreturn true;}return false;}function isDeferredResult(result){return result.type===ResultType.deferred;}function isErrorResult(result){return result.type===ResultType.error;}function isRedirectResult(result){return(result&&result.type)===ResultType.redirect;}function isDeferredData(value){let deferred=value;return deferred&&typeof deferred===\"object\"&&typeof deferred.data===\"object\"&&typeof deferred.subscribe===\"function\"&&typeof deferred.cancel===\"function\"&&typeof deferred.resolveData===\"function\";}function isResponse(value){return value!=null&&typeof value.status===\"number\"&&typeof value.statusText===\"string\"&&typeof value.headers===\"object\"&&typeof value.body!==\"undefined\";}function isRedirectResponse(result){if(!isResponse(result)){return false;}let status=result.status;let location=result.headers.get(\"Location\");return status>=300&&status<=399&&location!=null;}function isQueryRouteResponse(obj){return obj&&isResponse(obj.response)&&(obj.type===ResultType.data||ResultType.error);}function isValidMethod(method){return validRequestMethods.has(method.toLowerCase());}function isMutationMethod(method){return validMutationMethods.has(method.toLowerCase());}async function resolveDeferredResults(currentMatches,matchesToLoad,results,signals,isFetcher,currentLoaderData){for(let index=0;index<results.length;index++){let result=results[index];let match=matchesToLoad[index];// If we don't have a match, then we can have a deferred result to do\n// anything with.  This is for revalidating fetchers where the route was\n// removed during HMR\nif(!match){continue;}let currentMatch=currentMatches.find(m=>m.route.id===match.route.id);let isRevalidatingLoader=currentMatch!=null&&!isNewRouteInstance(currentMatch,match)&&(currentLoaderData&&currentLoaderData[match.route.id])!==undefined;if(isDeferredResult(result)&&(isFetcher||isRevalidatingLoader)){// Note: we do not have to touch activeDeferreds here since we race them\n// against the signal in resolveDeferredData and they'll get aborted\n// there if needed\nlet signal=signals[index];invariant(signal,\"Expected an AbortSignal for revalidating fetcher deferred result\");await resolveDeferredData(result,signal,isFetcher).then(result=>{if(result){results[index]=result||results[index];}});}}}async function resolveDeferredData(result,signal,unwrap){if(unwrap===void 0){unwrap=false;}let aborted=await result.deferredData.resolveData(signal);if(aborted){return;}if(unwrap){try{return{type:ResultType.data,data:result.deferredData.unwrappedData};}catch(e){// Handle any TrackedPromise._error values encountered while unwrapping\nreturn{type:ResultType.error,error:e};}}return{type:ResultType.data,data:result.deferredData.data};}function hasNakedIndexQuery(search){return new URLSearchParams(search).getAll(\"index\").some(v=>v===\"\");}// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(match,loaderData){let{route,pathname,params}=match;return{id:route.id,pathname,params,data:loaderData[route.id],handle:route.handle};}function getTargetMatch(matches,location){let search=typeof location===\"string\"?parsePath(location).search:location.search;if(matches[matches.length-1].route.index&&hasNakedIndexQuery(search||\"\")){// Return the leaf index route when index is present\nreturn matches[matches.length-1];}// Otherwise grab the deepest \"path contributing\" match (ignoring index and\n// pathless layout routes)\nlet pathMatches=getPathContributingMatches(matches);return pathMatches[pathMatches.length-1];}//#endregion\nexport{AbortedDeferredError,Action,ErrorResponse,IDLE_BLOCKER,IDLE_FETCHER,IDLE_NAVIGATION,UNSAFE_DEFERRED_SYMBOL,DeferredData as UNSAFE_DeferredData,convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes,getPathContributingMatches as UNSAFE_getPathContributingMatches,invariant as UNSAFE_invariant,warning as UNSAFE_warning,createBrowserHistory,createHashHistory,createMemoryHistory,createPath,createRouter,createStaticHandler,defer,generatePath,getStaticContextFromError,getToPathname,isDeferredData,isRouteErrorResponse,joinPaths,json,matchPath,matchRoutes,normalizePathname,parsePath,redirect,resolvePath,resolveTo,stripBasename};","map":{"version":3,"names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_extends","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","assign","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","originalPath","prefix","array","isLastSegment","star","starParam","keyMatch","optional","param","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","_","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","DeferredData","constructor","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","emit","settledKey","subscriber","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","isBrowser","createElement","isServer","defaultMapRouteProperties","hasErrorBoundary","Boolean","createRouter","detectErrorBoundary","dataRoutes","inFlightDataRoutes","future","v7_normalizeFormMethod","v7_prependBasename","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","lazy","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","deleteBlocker","updateState","startNavigation","dispose","clear","deleteFetcher","newState","completeNavigation","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","getSavedScrollPosition","navigate","opts","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","Request","handleLoaders","fetcherSubmission","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","matchesToLoad","revalidatingFetchers","getMatchesToLoad","updatedFetchers","markFetchRedirectsDone","rf","fetcher","revalidatingFetcher","abortPendingFetchRevalidations","f","abortFetcher","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","getFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","_temp","_window","redirectLocation","_isFetchActionRedirect","isDifferentBasename","redirectHistoryAction","currentMatches","fetchersToLoad","all","resolveDeferredResults","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","query","_temp2","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp3","find","values","_result$activeDeferre","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","toUpperCase","stripHashFromPath","searchParams","convertFormDataToSearchParams","append","boundaryId","boundaryMatches","findIndex","currentUrl","nextUrl","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","isStaticRequest","resultType","onReject","runHandler","handler","protocol","isSameBasename","contentType","text","isDeferredData","_result$init","_result$init2","deferred","body","URLSearchParams","File","name","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","_temp4","errorMessage","obj","signals","isRevalidatingLoader","unwrap","getAll","handle","pathMatches"],"sources":["/home/kubigor/projects/business_website/src/node_modules/@remix-run/router/history.ts","/home/kubigor/projects/business_website/src/node_modules/@remix-run/router/utils.ts","/home/kubigor/projects/business_website/src/node_modules/@remix-run/router/router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { warning, invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on <Form>,\n * useSubmit(), <fetcher.Form>, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod | V7_FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<DataFunctionValue> | DataFunctionValue;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<Omit<R, ImmutableRouteKey>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        const starParam = params[star];\n\n        // Apply the splat\n        return starParam;\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n\n        if (optional === \"?\") {\n          return param == null ? \"\" : param;\n        }\n\n        if (param == null) {\n          invariant(false, `Missing \":${key}\" param`);\n        }\n\n        return param;\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  DataResult,\n  DeferredData,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  DetectErrorBoundaryFunction,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  ShouldRevalidateFunction,\n  RouteManifest,\n  ImmutableRouteKey,\n  ActionFunction,\n  LoaderFunction,\n  V7_MutationFormMethod,\n  V7_FormMethod,\n  HTMLFormMethod,\n  MutationFormMethod,\n  MapRoutePropertiesFunction,\n} from \"./utils\";\nimport {\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_normalizeFormMethod: boolean;\n  v7_prependBasename: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\ntype BaseNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  fromRouteId?: string;\n};\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | V7_FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod | V7_FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | V7_FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod | V7_FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    !initialMatches.some((m) => m.route.lazy) &&\n    // And we have to either have no loaders or have been provided hydrationData\n    (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n    if (\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission || fetcherSubmission\n        ? submission || fetcherSubmission\n        : loadingNavigation.formMethod &&\n          loadingNavigation.formAction &&\n          loadingNavigation.formData &&\n          loadingNavigation.formEncType\n        ? {\n            formMethod: loadingNavigation.formMethod,\n            formAction: loadingNavigation.formAction,\n            formData: loadingNavigation.formData,\n            formEncType: loadingNavigation.formEncType,\n          }\n        : undefined;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n        ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) => {\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        submission,\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      mapRouteProperties,\n      basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      fetchRedirectIds.add(key);\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n    // Check if this an absolute external redirect that goes to a new origin\n    if (\n      ABSOLUTE_URL_REGEX.test(redirect.location) &&\n      isBrowser &&\n      typeof window?.location !== \"undefined\"\n    ) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, basename) == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        },\n        fetcherSubmission: submission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            f.match,\n            f.matches,\n            manifest,\n            mapRouteProperties,\n            basename\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    inFlightDataRoutes = newRoutes;\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        mapRouteProperties,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          mapRouteProperties,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getPathContributingMatches(contextualMatches).map((m) => m.pathnameBase),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: RouterNavigateOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    let formMethod = opts.formMethod || \"get\";\n    submission = {\n      formMethod: normalizeFormMethod\n        ? (formMethod.toUpperCase() as V7_FormMethod)\n        : (formMethod.toLowerCase() as FormMethod),\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n        isRevalidationRequired ||\n        // Clicked the same link, resubmitted a GET form\n        currentUrl.pathname + currentUrl.search ===\n          nextUrl.pathname + nextUrl.search ||\n        // Search params affect all loaders\n        currentUrl.search !== nextUrl.search ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some((m) => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params,\n      ...submission,\n      actionResult,\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      defaultShouldRevalidate: isRevalidationRequired,\n    });\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  basename: string,\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([\n          runHandler(handler),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(\n          new URL(request.url),\n          matches.slice(0, matches.indexOf(match) + 1),\n          basename,\n          true,\n          location\n        );\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // No hash -> hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // current hash -> same hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // current hash -> new hash\n    return true;\n  }\n\n  return false;\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}